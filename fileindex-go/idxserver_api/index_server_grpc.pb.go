// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: index_server.proto

package idxserver_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HLFDataIndexClient is the client API for HLFDataIndex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HLFDataIndexClient interface {
	CreateIndex(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*IdxResponse, error)
	InsertIndex(ctx context.Context, opts ...grpc.CallOption) (HLFDataIndex_InsertIndexClient, error)
	InsertSIndex(ctx context.Context, opts ...grpc.CallOption) (HLFDataIndex_InsertSIndexClient, error)
	GetindexDataByField(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*RstTxList, error)
}

type hLFDataIndexClient struct {
	cc grpc.ClientConnInterface
}

func NewHLFDataIndexClient(cc grpc.ClientConnInterface) HLFDataIndexClient {
	return &hLFDataIndexClient{cc}
}

func (c *hLFDataIndexClient) CreateIndex(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*IdxResponse, error) {
	out := new(IdxResponse)
	err := c.cc.Invoke(ctx, "/idxserver.HLFDataIndex/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hLFDataIndexClient) InsertIndex(ctx context.Context, opts ...grpc.CallOption) (HLFDataIndex_InsertIndexClient, error) {
	stream, err := c.cc.NewStream(ctx, &HLFDataIndex_ServiceDesc.Streams[0], "/idxserver.HLFDataIndex/InsertIndex", opts...)
	if err != nil {
		return nil, err
	}
	x := &hLFDataIndexInsertIndexClient{stream}
	return x, nil
}

type HLFDataIndex_InsertIndexClient interface {
	Send(*InsertData) error
	CloseAndRecv() (*IdxResponse, error)
	grpc.ClientStream
}

type hLFDataIndexInsertIndexClient struct {
	grpc.ClientStream
}

func (x *hLFDataIndexInsertIndexClient) Send(m *InsertData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hLFDataIndexInsertIndexClient) CloseAndRecv() (*IdxResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IdxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hLFDataIndexClient) InsertSIndex(ctx context.Context, opts ...grpc.CallOption) (HLFDataIndex_InsertSIndexClient, error) {
	stream, err := c.cc.NewStream(ctx, &HLFDataIndex_ServiceDesc.Streams[1], "/idxserver.HLFDataIndex/InsertSIndex", opts...)
	if err != nil {
		return nil, err
	}
	x := &hLFDataIndexInsertSIndexClient{stream}
	return x, nil
}

type HLFDataIndex_InsertSIndexClient interface {
	Send(*InsertSData) error
	CloseAndRecv() (*IdxResponse, error)
	grpc.ClientStream
}

type hLFDataIndexInsertSIndexClient struct {
	grpc.ClientStream
}

func (x *hLFDataIndexInsertSIndexClient) Send(m *InsertSData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hLFDataIndexInsertSIndexClient) CloseAndRecv() (*IdxResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IdxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hLFDataIndexClient) GetindexDataByField(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*RstTxList, error) {
	out := new(RstTxList)
	err := c.cc.Invoke(ctx, "/idxserver.HLFDataIndex/GetindexDataByField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HLFDataIndexServer is the server API for HLFDataIndex service.
// All implementations must embed UnimplementedHLFDataIndexServer
// for forward compatibility
type HLFDataIndexServer interface {
	CreateIndex(context.Context, *CreateRequest) (*IdxResponse, error)
	InsertIndex(HLFDataIndex_InsertIndexServer) error
	InsertSIndex(HLFDataIndex_InsertSIndexServer) error
	GetindexDataByField(context.Context, *SearchRequest) (*RstTxList, error)
	mustEmbedUnimplementedHLFDataIndexServer()
}

// UnimplementedHLFDataIndexServer must be embedded to have forward compatible implementations.
type UnimplementedHLFDataIndexServer struct {
}

func (UnimplementedHLFDataIndexServer) CreateIndex(context.Context, *CreateRequest) (*IdxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedHLFDataIndexServer) InsertIndex(HLFDataIndex_InsertIndexServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertIndex not implemented")
}
func (UnimplementedHLFDataIndexServer) InsertSIndex(HLFDataIndex_InsertSIndexServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertSIndex not implemented")
}
func (UnimplementedHLFDataIndexServer) GetindexDataByField(context.Context, *SearchRequest) (*RstTxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetindexDataByField not implemented")
}
func (UnimplementedHLFDataIndexServer) mustEmbedUnimplementedHLFDataIndexServer() {}

// UnsafeHLFDataIndexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HLFDataIndexServer will
// result in compilation errors.
type UnsafeHLFDataIndexServer interface {
	mustEmbedUnimplementedHLFDataIndexServer()
}

func RegisterHLFDataIndexServer(s grpc.ServiceRegistrar, srv HLFDataIndexServer) {
	s.RegisterService(&HLFDataIndex_ServiceDesc, srv)
}

func _HLFDataIndex_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HLFDataIndexServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idxserver.HLFDataIndex/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HLFDataIndexServer).CreateIndex(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HLFDataIndex_InsertIndex_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HLFDataIndexServer).InsertIndex(&hLFDataIndexInsertIndexServer{stream})
}

type HLFDataIndex_InsertIndexServer interface {
	SendAndClose(*IdxResponse) error
	Recv() (*InsertData, error)
	grpc.ServerStream
}

type hLFDataIndexInsertIndexServer struct {
	grpc.ServerStream
}

func (x *hLFDataIndexInsertIndexServer) SendAndClose(m *IdxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hLFDataIndexInsertIndexServer) Recv() (*InsertData, error) {
	m := new(InsertData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HLFDataIndex_InsertSIndex_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HLFDataIndexServer).InsertSIndex(&hLFDataIndexInsertSIndexServer{stream})
}

type HLFDataIndex_InsertSIndexServer interface {
	SendAndClose(*IdxResponse) error
	Recv() (*InsertSData, error)
	grpc.ServerStream
}

type hLFDataIndexInsertSIndexServer struct {
	grpc.ServerStream
}

func (x *hLFDataIndexInsertSIndexServer) SendAndClose(m *IdxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hLFDataIndexInsertSIndexServer) Recv() (*InsertSData, error) {
	m := new(InsertSData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HLFDataIndex_GetindexDataByField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HLFDataIndexServer).GetindexDataByField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idxserver.HLFDataIndex/GetindexDataByField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HLFDataIndexServer).GetindexDataByField(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HLFDataIndex_ServiceDesc is the grpc.ServiceDesc for HLFDataIndex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HLFDataIndex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idxserver.HLFDataIndex",
	HandlerType: (*HLFDataIndexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIndex",
			Handler:    _HLFDataIndex_CreateIndex_Handler,
		},
		{
			MethodName: "GetindexDataByField",
			Handler:    _HLFDataIndex_GetindexDataByField_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertIndex",
			Handler:       _HLFDataIndex_InsertIndex_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "InsertSIndex",
			Handler:       _HLFDataIndex_InsertSIndex_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "index_server.proto",
}
