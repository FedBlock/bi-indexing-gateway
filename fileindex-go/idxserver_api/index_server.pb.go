// file-based btree index package 2024-06-10
// created by myjang@etri.re.kr
// Update 2024-12-05

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: index_server.proto

package idxserver_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComparisonOps int32

const (
	ComparisonOps_Eq            ComparisonOps = 0
	ComparisonOps_NotEq         ComparisonOps = 1
	ComparisonOps_Less          ComparisonOps = 2
	ComparisonOps_LessThanEq    ComparisonOps = 3
	ComparisonOps_Greater       ComparisonOps = 4
	ComparisonOps_GreaterThanEq ComparisonOps = 5
	ComparisonOps_Range         ComparisonOps = 6
	ComparisonOps_Knn           ComparisonOps = 7
)

// Enum value maps for ComparisonOps.
var (
	ComparisonOps_name = map[int32]string{
		0: "Eq",
		1: "NotEq",
		2: "Less",
		3: "LessThanEq",
		4: "Greater",
		5: "GreaterThanEq",
		6: "Range",
		7: "Knn",
	}
	ComparisonOps_value = map[string]int32{
		"Eq":            0,
		"NotEq":         1,
		"Less":          2,
		"LessThanEq":    3,
		"Greater":       4,
		"GreaterThanEq": 5,
		"Range":         6,
		"Knn":           7,
	}
)

func (x ComparisonOps) Enum() *ComparisonOps {
	p := new(ComparisonOps)
	*p = x
	return p
}

func (x ComparisonOps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOps) Descriptor() protoreflect.EnumDescriptor {
	return file_index_server_proto_enumTypes[0].Descriptor()
}

func (ComparisonOps) Type() protoreflect.EnumType {
	return &file_index_server_proto_enumTypes[0]
}

func (x ComparisonOps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOps.Descriptor instead.
func (ComparisonOps) EnumDescriptor() ([]byte, []int) {
	return file_index_server_proto_rawDescGZIP(), []int{0}
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID        string `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`     //index id = used as a key
	IndexName      string `protobuf:"bytes,2,opt,name=IndexName,proto3" json:"IndexName,omitempty"` //index name
	KeyCol         string `protobuf:"bytes,3,opt,name=KeyCol,proto3" json:"KeyCol,omitempty"`       //index column name (one of PvdHist_data)
	FilePath       string `protobuf:"bytes,4,opt,name=FilePath,proto3" json:"FilePath,omitempty"`   //file index storage FilePath
	KeySize        int32  `protobuf:"varint,5,opt,name=KeySize,proto3" json:"KeySize,omitempty"`    //file index key size (byte)
	ReuqestMessage string `protobuf:"bytes,6,opt,name=Reuqest_message,json=ReuqestMessage,proto3" json:"Reuqest_message,omitempty"`
	BlockNum       int32  `protobuf:"varint,7,opt,name=BlockNum,proto3" json:"BlockNum,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_index_server_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *CreateRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CreateRequest) GetKeyCol() string {
	if x != nil {
		return x.KeyCol
	}
	return ""
}

func (x *CreateRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CreateRequest) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *CreateRequest) GetReuqestMessage() string {
	if x != nil {
		return x.ReuqestMessage
	}
	return ""
}

func (x *CreateRequest) GetBlockNum() int32 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

type IdxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode    int32  `protobuf:"varint,1,opt,name=Response_code,json=ResponseCode,proto3" json:"Response_code,omitempty"` // if 200 OK else Error
	ResponseMessage string `protobuf:"bytes,2,opt,name=Response_message,json=ResponseMessage,proto3" json:"Response_message,omitempty"`
	IndexID         string `protobuf:"bytes,3,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	IndexCol        string `protobuf:"bytes,4,opt,name=IndexCol,proto3" json:"IndexCol,omitempty"` //index column name
}

func (x *IdxResponse) Reset() {
	*x = IdxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdxResponse) ProtoMessage() {}

func (x *IdxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdxResponse.ProtoReflect.Descriptor instead.
func (*IdxResponse) Descriptor() ([]byte, []int) {
	return file_index_server_proto_rawDescGZIP(), []int{1}
}

func (x *IdxResponse) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *IdxResponse) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *IdxResponse) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *IdxResponse) GetIndexCol() string {
	if x != nil {
		return x.IndexCol
	}
	return ""
}

type BcDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId     string       `protobuf:"bytes,1,opt,name=TxId,proto3" json:"TxId,omitempty"`
	KeyCol   string       `protobuf:"bytes,2,opt,name=key_col,json=keyCol,proto3" json:"key_col,omitempty"`
	Pvd      *PvdHistData `protobuf:"bytes,3,opt,name=Pvd,proto3" json:"Pvd,omitempty"`
	Response *IdxResponse `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *BcDataInfo) Reset() {
	*x = BcDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcDataInfo) ProtoMessage() {}

func (x *BcDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_index_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcDataInfo.ProtoReflect.Descriptor instead.
func (*BcDataInfo) Descriptor() ([]byte, []int) {
	return file_index_server_proto_rawDescGZIP(), []int{2}
}

func (x *BcDataInfo) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *BcDataInfo) GetKeyCol() string {
	if x != nil {
		return x.KeyCol
	}
	return ""
}

func (x *BcDataInfo) GetPvd() *PvdHistData {
	if x != nil {
		return x.Pvd
	}
	return nil
}

func (x *BcDataInfo) GetResponse() *IdxResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type InsertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColIndex string        `protobuf:"bytes,1,opt,name=ColIndex,proto3" json:"ColIndex,omitempty"` //indexid
	BcList   []*BcDataInfo `protobuf:"bytes,2,rep,name=BcList,proto3" json:"BcList,omitempty"`
	Response *IdxResponse  `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
	ColName  string        `protobuf:"bytes,4,opt,name=ColName,proto3" json:"ColName,omitempty"`   //indexing column (KeyCol)
	FilePath string        `protobuf:"bytes,5,opt,name=FilePath,proto3" json:"FilePath,omitempty"` //file index storage FilePath
	KeySize  int32         `protobuf:"varint,6,opt,name=KeySize,proto3" json:"KeySize,omitempty"`  //file index key size (byte)
}

func (x *InsertData) Reset() {
	*x = InsertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertData) ProtoMessage() {}

func (x *InsertData) ProtoReflect() protoreflect.Message {
	mi := &file_index_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertData.ProtoReflect.Descriptor instead.
func (*InsertData) Descriptor() ([]byte, []int) {
	return file_index_server_proto_rawDescGZIP(), []int{3}
}

func (x *InsertData) GetColIndex() string {
	if x != nil {
		return x.ColIndex
	}
	return ""
}

func (x *InsertData) GetBcList() []*BcDataInfo {
	if x != nil {
		return x.BcList
	}
	return nil
}

func (x *InsertData) GetResponse() *IdxResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *InsertData) GetColName() string {
	if x != nil {
		return x.ColName
	}
	return ""
}

func (x *InsertData) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *InsertData) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

type InsertSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColIndex string  `protobuf:"bytes,1,opt,name=ColIndex,proto3" json:"ColIndex,omitempty"` //indexid
	ColName  string  `protobuf:"bytes,2,opt,name=ColName,proto3" json:"ColName,omitempty"`   //indexing column (KeyCol)
	X        float32 `protobuf:"fixed32,3,opt,name=x,proto3" json:"x,omitempty"`
	Y        float32 `protobuf:"fixed32,4,opt,name=y,proto3" json:"y,omitempty"`
	GeoHash  uint32  `protobuf:"varint,5,opt,name=GeoHash,proto3" json:"GeoHash,omitempty"`
	TxId     string  `protobuf:"bytes,6,opt,name=TxId,proto3" json:"TxId,omitempty"`
	OBU_ID   string  `protobuf:"bytes,7,opt,name=OBU_ID,json=OBUID,proto3" json:"OBU_ID,omitempty"`
	Time     uint64  `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
	FilePath string  `protobuf:"bytes,9,opt,name=FilePath,proto3" json:"FilePath,omitempty"` //file index storage FilePath
	KeySize  int32   `protobuf:"varint,10,opt,name=KeySize,proto3" json:"KeySize,omitempty"` //file index key size (byte)
}

func (x *InsertSData) Reset() {
	*x = InsertSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertSData) ProtoMessage() {}

func (x *InsertSData) ProtoReflect() protoreflect.Message {
	mi := &file_index_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertSData.ProtoReflect.Descriptor instead.
func (*InsertSData) Descriptor() ([]byte, []int) {
	return file_index_server_proto_rawDescGZIP(), []int{4}
}

func (x *InsertSData) GetColIndex() string {
	if x != nil {
		return x.ColIndex
	}
	return ""
}

func (x *InsertSData) GetColName() string {
	if x != nil {
		return x.ColName
	}
	return ""
}

func (x *InsertSData) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *InsertSData) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *InsertSData) GetGeoHash() uint32 {
	if x != nil {
		return x.GeoHash
	}
	return 0
}

func (x *InsertSData) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *InsertSData) GetOBU_ID() string {
	if x != nil {
		return x.OBU_ID
	}
	return ""
}

func (x *InsertSData) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *InsertSData) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *InsertSData) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID  string        `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"` //index id = used as a key
	Key      string        `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	TxId     string        `protobuf:"bytes,3,opt,name=TxId,proto3" json:"TxId,omitempty"`
	Field    string        `protobuf:"bytes,4,opt,name=Field,proto3" json:"Field,omitempty"`
	Value    string        `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"` //for simple query (CompOp 0~5)
	Begin    string        `protobuf:"bytes,6,opt,name=Begin,proto3" json:"Begin,omitempty"` //for range query
	End      string        `protobuf:"bytes,7,opt,name=End,proto3" json:"End,omitempty"`
	ComOp    ComparisonOps `protobuf:"varint,8,opt,name=ComOp,proto3,enum=idxserver.ComparisonOps" json:"ComOp,omitempty"`
	X        float32       `protobuf:"fixed32,9,opt,name=x,proto3" json:"x,omitempty"`
	Y        float32       `protobuf:"fixed32,10,opt,name=y,proto3" json:"y,omitempty"`
	K        int32         `protobuf:"varint,11,opt,name=k,proto3" json:"k,omitempty"`
	Range    float32       `protobuf:"fixed32,12,opt,name=range,proto3" json:"range,omitempty"`
	FilePath string        `protobuf:"bytes,13,opt,name=FilePath,proto3" json:"FilePath,omitempty"` //file index storage FilePath
	KeySize  int32         `protobuf:"varint,14,opt,name=keySize,proto3" json:"keySize,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_index_server_proto_rawDescGZIP(), []int{5}
}

func (x *SearchRequest) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *SearchRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SearchRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SearchRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SearchRequest) GetBegin() string {
	if x != nil {
		return x.Begin
	}
	return ""
}

func (x *SearchRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *SearchRequest) GetComOp() ComparisonOps {
	if x != nil {
		return x.ComOp
	}
	return ComparisonOps_Eq
}

func (x *SearchRequest) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SearchRequest) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *SearchRequest) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *SearchRequest) GetRange() float32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *SearchRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *SearchRequest) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

type RstTxList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID string   `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	Key     string   `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	IdxData []string `protobuf:"bytes,3,rep,name=IdxData,proto3" json:"IdxData,omitempty"`
}

func (x *RstTxList) Reset() {
	*x = RstTxList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RstTxList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RstTxList) ProtoMessage() {}

func (x *RstTxList) ProtoReflect() protoreflect.Message {
	mi := &file_index_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RstTxList.ProtoReflect.Descriptor instead.
func (*RstTxList) Descriptor() ([]byte, []int) {
	return file_index_server_proto_rawDescGZIP(), []int{6}
}

func (x *RstTxList) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *RstTxList) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RstTxList) GetIdxData() []string {
	if x != nil {
		return x.IdxData
	}
	return nil
}

type PvdHistData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObuId                string `protobuf:"bytes,1,opt,name=Obu_id,json=ObuId,proto3" json:"Obu_id,omitempty"`
	CollectionDt         string `protobuf:"bytes,2,opt,name=Collection_dt,json=CollectionDt,proto3" json:"Collection_dt,omitempty"`
	StartvectorLatitude  string `protobuf:"bytes,3,opt,name=Startvector_latitude,json=StartvectorLatitude,proto3" json:"Startvector_latitude,omitempty"`
	StartvectorLongitude string `protobuf:"bytes,4,opt,name=Startvector_longitude,json=StartvectorLongitude,proto3" json:"Startvector_longitude,omitempty"`
	Transmisstion        string `protobuf:"bytes,5,opt,name=Transmisstion,proto3" json:"Transmisstion,omitempty"`
	Speed                int32  `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	HazardLights         string `protobuf:"bytes,7,opt,name=Hazard_lights,json=HazardLights,proto3" json:"Hazard_lights,omitempty"`
	LeftTurnSignalOn     string `protobuf:"bytes,8,opt,name=Left_turn_signal_on,json=LeftTurnSignalOn,proto3" json:"Left_turn_signal_on,omitempty"`
	RightTurnSignalOn    string `protobuf:"bytes,9,opt,name=Right_turn_signal_on,json=RightTurnSignalOn,proto3" json:"Right_turn_signal_on,omitempty"`
	Steering             int32  `protobuf:"varint,10,opt,name=Steering,proto3" json:"Steering,omitempty"`
	Rpm                  int32  `protobuf:"varint,11,opt,name=Rpm,proto3" json:"Rpm,omitempty"`
	Footbrake            string `protobuf:"bytes,12,opt,name=Footbrake,proto3" json:"Footbrake,omitempty"`
	Gear                 string `protobuf:"bytes,13,opt,name=Gear,proto3" json:"Gear,omitempty"`
	Accelator            int32  `protobuf:"varint,14,opt,name=Accelator,proto3" json:"Accelator,omitempty"`
	Wipers               string `protobuf:"bytes,15,opt,name=Wipers,proto3" json:"Wipers,omitempty"`
	TireWarnLeftF        string `protobuf:"bytes,16,opt,name=Tire_warn_left_f,json=TireWarnLeftF,proto3" json:"Tire_warn_left_f,omitempty"`
	TireWarnLeftR        string `protobuf:"bytes,17,opt,name=Tire_warn_left_r,json=TireWarnLeftR,proto3" json:"Tire_warn_left_r,omitempty"`
	TireWarnRightF       string `protobuf:"bytes,18,opt,name=Tire_warn_right_f,json=TireWarnRightF,proto3" json:"Tire_warn_right_f,omitempty"`
	TireWarnRightR       string `protobuf:"bytes,19,opt,name=Tire_warn_right_r,json=TireWarnRightR,proto3" json:"Tire_warn_right_r,omitempty"`
	TirePsiLeftF         int32  `protobuf:"varint,20,opt,name=Tire_psi_left_f,json=TirePsiLeftF,proto3" json:"Tire_psi_left_f,omitempty"`
	TirePsiLeftR         int32  `protobuf:"varint,21,opt,name=Tire_psi_left_r,json=TirePsiLeftR,proto3" json:"Tire_psi_left_r,omitempty"`
	TirePsiRightF        int32  `protobuf:"varint,22,opt,name=Tire_psi_right_f,json=TirePsiRightF,proto3" json:"Tire_psi_right_f,omitempty"`
	TirePsiRightR        int32  `protobuf:"varint,23,opt,name=Tire_psi_right_r,json=TirePsiRightR,proto3" json:"Tire_psi_right_r,omitempty"`
	FuelPercent          int32  `protobuf:"varint,24,opt,name=Fuel_percent,json=FuelPercent,proto3" json:"Fuel_percent,omitempty"`
	FuelLiter            int32  `protobuf:"varint,25,opt,name=Fuel_liter,json=FuelLiter,proto3" json:"Fuel_liter,omitempty"`
	Totaldist            int32  `protobuf:"varint,26,opt,name=Totaldist,proto3" json:"Totaldist,omitempty"`
	RsuId                string `protobuf:"bytes,27,opt,name=Rsu_id,json=RsuId,proto3" json:"Rsu_id,omitempty"`
	MsgId                string `protobuf:"bytes,28,opt,name=Msg_id,json=MsgId,proto3" json:"Msg_id,omitempty"`
	StartvectorHeading   int32  `protobuf:"varint,29,opt,name=Startvector_heading,json=StartvectorHeading,proto3" json:"Startvector_heading,omitempty"`
	Address              string `protobuf:"bytes,30,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *PvdHistData) Reset() {
	*x = PvdHistData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvdHistData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvdHistData) ProtoMessage() {}

func (x *PvdHistData) ProtoReflect() protoreflect.Message {
	mi := &file_index_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvdHistData.ProtoReflect.Descriptor instead.
func (*PvdHistData) Descriptor() ([]byte, []int) {
	return file_index_server_proto_rawDescGZIP(), []int{7}
}

func (x *PvdHistData) GetObuId() string {
	if x != nil {
		return x.ObuId
	}
	return ""
}

func (x *PvdHistData) GetCollectionDt() string {
	if x != nil {
		return x.CollectionDt
	}
	return ""
}

func (x *PvdHistData) GetStartvectorLatitude() string {
	if x != nil {
		return x.StartvectorLatitude
	}
	return ""
}

func (x *PvdHistData) GetStartvectorLongitude() string {
	if x != nil {
		return x.StartvectorLongitude
	}
	return ""
}

func (x *PvdHistData) GetTransmisstion() string {
	if x != nil {
		return x.Transmisstion
	}
	return ""
}

func (x *PvdHistData) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PvdHistData) GetHazardLights() string {
	if x != nil {
		return x.HazardLights
	}
	return ""
}

func (x *PvdHistData) GetLeftTurnSignalOn() string {
	if x != nil {
		return x.LeftTurnSignalOn
	}
	return ""
}

func (x *PvdHistData) GetRightTurnSignalOn() string {
	if x != nil {
		return x.RightTurnSignalOn
	}
	return ""
}

func (x *PvdHistData) GetSteering() int32 {
	if x != nil {
		return x.Steering
	}
	return 0
}

func (x *PvdHistData) GetRpm() int32 {
	if x != nil {
		return x.Rpm
	}
	return 0
}

func (x *PvdHistData) GetFootbrake() string {
	if x != nil {
		return x.Footbrake
	}
	return ""
}

func (x *PvdHistData) GetGear() string {
	if x != nil {
		return x.Gear
	}
	return ""
}

func (x *PvdHistData) GetAccelator() int32 {
	if x != nil {
		return x.Accelator
	}
	return 0
}

func (x *PvdHistData) GetWipers() string {
	if x != nil {
		return x.Wipers
	}
	return ""
}

func (x *PvdHistData) GetTireWarnLeftF() string {
	if x != nil {
		return x.TireWarnLeftF
	}
	return ""
}

func (x *PvdHistData) GetTireWarnLeftR() string {
	if x != nil {
		return x.TireWarnLeftR
	}
	return ""
}

func (x *PvdHistData) GetTireWarnRightF() string {
	if x != nil {
		return x.TireWarnRightF
	}
	return ""
}

func (x *PvdHistData) GetTireWarnRightR() string {
	if x != nil {
		return x.TireWarnRightR
	}
	return ""
}

func (x *PvdHistData) GetTirePsiLeftF() int32 {
	if x != nil {
		return x.TirePsiLeftF
	}
	return 0
}

func (x *PvdHistData) GetTirePsiLeftR() int32 {
	if x != nil {
		return x.TirePsiLeftR
	}
	return 0
}

func (x *PvdHistData) GetTirePsiRightF() int32 {
	if x != nil {
		return x.TirePsiRightF
	}
	return 0
}

func (x *PvdHistData) GetTirePsiRightR() int32 {
	if x != nil {
		return x.TirePsiRightR
	}
	return 0
}

func (x *PvdHistData) GetFuelPercent() int32 {
	if x != nil {
		return x.FuelPercent
	}
	return 0
}

func (x *PvdHistData) GetFuelLiter() int32 {
	if x != nil {
		return x.FuelLiter
	}
	return 0
}

func (x *PvdHistData) GetTotaldist() int32 {
	if x != nil {
		return x.Totaldist
	}
	return 0
}

func (x *PvdHistData) GetRsuId() string {
	if x != nil {
		return x.RsuId
	}
	return ""
}

func (x *PvdHistData) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *PvdHistData) GetStartvectorHeading() int32 {
	if x != nil {
		return x.StartvectorHeading
	}
	return 0
}

func (x *PvdHistData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

var File_index_server_proto protoreflect.FileDescriptor

var file_index_server_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x64, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22,
	0xda, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x65, 0x79,
	0x43, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4b, 0x65, 0x79, 0x43, 0x6f,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x52, 0x65, 0x75, 0x71, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x52, 0x65, 0x75, 0x71, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x93, 0x01, 0x0a,
	0x0b, 0x49, 0x64, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x6f, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x42, 0x63, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x12, 0x29,
	0x0a, 0x03, 0x50, 0x76, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64,
	0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x76, 0x64, 0x48, 0x69, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x03, 0x50, 0x76, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x64,
	0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01,
	0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x06, 0x42, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x64, 0x78, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x63, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x42, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x64, 0x78, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x0b,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x65, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x47, 0x65, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x4f,
	0x42, 0x55, 0x5f, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x42, 0x55,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc9, 0x02, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45,
	0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x43, 0x6f, 0x6d, 0x4f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x69, 0x64, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6d,
	0x4f, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x51, 0x0a, 0x09, 0x52, 0x73, 0x74, 0x54,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x64, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x49, 0x64, 0x78, 0x44, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x08, 0x0a, 0x0c,
	0x50, 0x76, 0x64, 0x48, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06,
	0x4f, 0x62, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x62,
	0x75, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x13, 0x4c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x4c, 0x65, 0x66, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e,
	0x12, 0x2f, 0x0a, 0x14, 0x52, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x52, 0x70, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x70, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x6f, 0x74, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x6f, 0x74, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x47, 0x65, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x65, 0x61,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x69, 0x70, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x57, 0x69, 0x70, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x54, 0x69, 0x72, 0x65, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x54, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x46,
	0x12, 0x27, 0x0a, 0x10, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x69, 0x72, 0x65,
	0x57, 0x61, 0x72, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x12, 0x29, 0x0a, 0x11, 0x54, 0x69, 0x72,
	0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x12, 0x29, 0x0a, 0x11, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72,
	0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x12,
	0x25, 0x0a, 0x0f, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x73, 0x69, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x69, 0x72, 0x65, 0x50, 0x73,
	0x69, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x12, 0x25, 0x0a, 0x0f, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x70,
	0x73, 0x69, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x54, 0x69, 0x72, 0x65, 0x50, 0x73, 0x69, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x12, 0x27, 0x0a,
	0x10, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x73, 0x69, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x69, 0x72, 0x65, 0x50, 0x73, 0x69,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x12, 0x27, 0x0a, 0x10, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x70,
	0x73, 0x69, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x54, 0x69, 0x72, 0x65, 0x50, 0x73, 0x69, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x12,
	0x21, 0x0a, 0x0c, 0x46, 0x75, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x75, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x46, 0x75, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x75, 0x65, 0x6c, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x64, 0x69, 0x73, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x64, 0x69, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x52, 0x73, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x52, 0x73, 0x75, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x70, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x71, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68,
	0x61, 0x6e, 0x45, 0x71, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x45, 0x71, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x6e, 0x6e, 0x10, 0x07, 0x32, 0x98, 0x02, 0x0a, 0x0c, 0x48,
	0x4c, 0x46, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x69, 0x64, 0x78,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x2e, 0x69, 0x64,
	0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x40, 0x0a, 0x0c,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x2e, 0x69,
	0x64, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x45,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x2e, 0x69, 0x64, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x69, 0x64, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x74, 0x54,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x1c, 0x5a, 0x1a, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x64, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_index_server_proto_rawDescOnce sync.Once
	file_index_server_proto_rawDescData = file_index_server_proto_rawDesc
)

func file_index_server_proto_rawDescGZIP() []byte {
	file_index_server_proto_rawDescOnce.Do(func() {
		file_index_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_index_server_proto_rawDescData)
	})
	return file_index_server_proto_rawDescData
}

var file_index_server_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_index_server_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_index_server_proto_goTypes = []interface{}{
	(ComparisonOps)(0),    // 0: idxserver.ComparisonOps
	(*CreateRequest)(nil), // 1: idxserver.CreateRequest
	(*IdxResponse)(nil),   // 2: idxserver.IdxResponse
	(*BcDataInfo)(nil),    // 3: idxserver.BcDataInfo
	(*InsertData)(nil),    // 4: idxserver.InsertData
	(*InsertSData)(nil),   // 5: idxserver.InsertSData
	(*SearchRequest)(nil), // 6: idxserver.SearchRequest
	(*RstTxList)(nil),     // 7: idxserver.RstTxList
	(*PvdHistData)(nil),   // 8: idxserver.PvdHist_data
}
var file_index_server_proto_depIdxs = []int32{
	8, // 0: idxserver.BcDataInfo.Pvd:type_name -> idxserver.PvdHist_data
	2, // 1: idxserver.BcDataInfo.Response:type_name -> idxserver.IdxResponse
	3, // 2: idxserver.InsertData.BcList:type_name -> idxserver.BcDataInfo
	2, // 3: idxserver.InsertData.Response:type_name -> idxserver.IdxResponse
	0, // 4: idxserver.SearchRequest.ComOp:type_name -> idxserver.ComparisonOps
	1, // 5: idxserver.HLFDataIndex.CreateIndex:input_type -> idxserver.CreateRequest
	4, // 6: idxserver.HLFDataIndex.InsertIndex:input_type -> idxserver.InsertData
	5, // 7: idxserver.HLFDataIndex.InsertSIndex:input_type -> idxserver.InsertSData
	6, // 8: idxserver.HLFDataIndex.GetindexDataByField:input_type -> idxserver.SearchRequest
	2, // 9: idxserver.HLFDataIndex.CreateIndex:output_type -> idxserver.IdxResponse
	2, // 10: idxserver.HLFDataIndex.InsertIndex:output_type -> idxserver.IdxResponse
	2, // 11: idxserver.HLFDataIndex.InsertSIndex:output_type -> idxserver.IdxResponse
	7, // 12: idxserver.HLFDataIndex.GetindexDataByField:output_type -> idxserver.RstTxList
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_index_server_proto_init() }
func file_index_server_proto_init() {
	if File_index_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_index_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RstTxList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvdHistData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_index_server_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_index_server_proto_goTypes,
		DependencyIndexes: file_index_server_proto_depIdxs,
		EnumInfos:         file_index_server_proto_enumTypes,
		MessageInfos:      file_index_server_proto_msgTypes,
	}.Build()
	File_index_server_proto = out.File
	file_index_server_proto_rawDesc = nil
	file_index_server_proto_goTypes = nil
	file_index_server_proto_depIdxs = nil
}
