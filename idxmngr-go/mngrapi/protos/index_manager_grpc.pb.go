// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: protos/index_manager.proto

package mngrapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexManagerClient is the client API for IndexManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexManagerClient interface {
	// for index server
	CreateIndexRequest(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error)
	UpdateIndexRequest(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error)
	InsertIndexRequest(ctx context.Context, opts ...grpc.CallOption) (IndexManager_InsertIndexRequestClient, error)
	GetindexDataByFieldM(ctx context.Context, in *SearchRequestM, opts ...grpc.CallOption) (*RstTxListM, error)
	// for idxmngr
	GetIndexInfo(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error)
	GetIndexList(ctx context.Context, in *IndexInfoRequest, opts ...grpc.CallOption) (*IndexList, error)
	GetQueryInfo(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryInfo, error)
}

type indexManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexManagerClient(cc grpc.ClientConnInterface) IndexManagerClient {
	return &indexManagerClient{cc}
}

func (c *indexManagerClient) CreateIndexRequest(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error) {
	out := new(IdxMngrResponse)
	err := c.cc.Invoke(ctx, "/idxmngrapi.Index_manager/CreateIndexRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) UpdateIndexRequest(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error) {
	out := new(IdxMngrResponse)
	err := c.cc.Invoke(ctx, "/idxmngrapi.Index_manager/UpdateIndexRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) InsertIndexRequest(ctx context.Context, opts ...grpc.CallOption) (IndexManager_InsertIndexRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndexManager_ServiceDesc.Streams[0], "/idxmngrapi.Index_manager/InsertIndexRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexManagerInsertIndexRequestClient{stream}
	return x, nil
}

type IndexManager_InsertIndexRequestClient interface {
	Send(*InsertDatatoIdx) error
	CloseAndRecv() (*IdxMngrResponse, error)
	grpc.ClientStream
}

type indexManagerInsertIndexRequestClient struct {
	grpc.ClientStream
}

func (x *indexManagerInsertIndexRequestClient) Send(m *InsertDatatoIdx) error {
	return x.ClientStream.SendMsg(m)
}

func (x *indexManagerInsertIndexRequestClient) CloseAndRecv() (*IdxMngrResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IdxMngrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indexManagerClient) GetindexDataByFieldM(ctx context.Context, in *SearchRequestM, opts ...grpc.CallOption) (*RstTxListM, error) {
	out := new(RstTxListM)
	err := c.cc.Invoke(ctx, "/idxmngrapi.Index_manager/GetindexDataByFieldM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) GetIndexInfo(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error) {
	out := new(IdxMngrResponse)
	err := c.cc.Invoke(ctx, "/idxmngrapi.Index_manager/GetIndexInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) GetIndexList(ctx context.Context, in *IndexInfoRequest, opts ...grpc.CallOption) (*IndexList, error) {
	out := new(IndexList)
	err := c.cc.Invoke(ctx, "/idxmngrapi.Index_manager/GetIndexList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) GetQueryInfo(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryInfo, error) {
	out := new(QueryInfo)
	err := c.cc.Invoke(ctx, "/idxmngrapi.Index_manager/GetQueryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexManagerServer is the server API for IndexManager service.
// All implementations must embed UnimplementedIndexManagerServer
// for forward compatibility
type IndexManagerServer interface {
	// for index server
	CreateIndexRequest(context.Context, *IndexInfo) (*IdxMngrResponse, error)
	UpdateIndexRequest(context.Context, *IndexInfo) (*IdxMngrResponse, error)
	InsertIndexRequest(IndexManager_InsertIndexRequestServer) error
	GetindexDataByFieldM(context.Context, *SearchRequestM) (*RstTxListM, error)
	// for idxmngr
	GetIndexInfo(context.Context, *IndexInfo) (*IdxMngrResponse, error)
	GetIndexList(context.Context, *IndexInfoRequest) (*IndexList, error)
	GetQueryInfo(context.Context, *QueryRequest) (*QueryInfo, error)
	mustEmbedUnimplementedIndexManagerServer()
}

// UnimplementedIndexManagerServer must be embedded to have forward compatible implementations.
type UnimplementedIndexManagerServer struct {
}

func (UnimplementedIndexManagerServer) CreateIndexRequest(context.Context, *IndexInfo) (*IdxMngrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndexRequest not implemented")
}
func (UnimplementedIndexManagerServer) UpdateIndexRequest(context.Context, *IndexInfo) (*IdxMngrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndexRequest not implemented")
}
func (UnimplementedIndexManagerServer) InsertIndexRequest(IndexManager_InsertIndexRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertIndexRequest not implemented")
}
func (UnimplementedIndexManagerServer) GetindexDataByFieldM(context.Context, *SearchRequestM) (*RstTxListM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetindexDataByFieldM not implemented")
}
func (UnimplementedIndexManagerServer) GetIndexInfo(context.Context, *IndexInfo) (*IdxMngrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexInfo not implemented")
}
func (UnimplementedIndexManagerServer) GetIndexList(context.Context, *IndexInfoRequest) (*IndexList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexList not implemented")
}
func (UnimplementedIndexManagerServer) GetQueryInfo(context.Context, *QueryRequest) (*QueryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryInfo not implemented")
}
func (UnimplementedIndexManagerServer) mustEmbedUnimplementedIndexManagerServer() {}

// UnsafeIndexManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexManagerServer will
// result in compilation errors.
type UnsafeIndexManagerServer interface {
	mustEmbedUnimplementedIndexManagerServer()
}

func RegisterIndexManagerServer(s grpc.ServiceRegistrar, srv IndexManagerServer) {
	s.RegisterService(&IndexManager_ServiceDesc, srv)
}

func _IndexManager_CreateIndexRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).CreateIndexRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idxmngrapi.Index_manager/CreateIndexRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).CreateIndexRequest(ctx, req.(*IndexInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_UpdateIndexRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).UpdateIndexRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idxmngrapi.Index_manager/UpdateIndexRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).UpdateIndexRequest(ctx, req.(*IndexInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_InsertIndexRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IndexManagerServer).InsertIndexRequest(&indexManagerInsertIndexRequestServer{stream})
}

type IndexManager_InsertIndexRequestServer interface {
	SendAndClose(*IdxMngrResponse) error
	Recv() (*InsertDatatoIdx, error)
	grpc.ServerStream
}

type indexManagerInsertIndexRequestServer struct {
	grpc.ServerStream
}

func (x *indexManagerInsertIndexRequestServer) SendAndClose(m *IdxMngrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *indexManagerInsertIndexRequestServer) Recv() (*InsertDatatoIdx, error) {
	m := new(InsertDatatoIdx)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IndexManager_GetindexDataByFieldM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).GetindexDataByFieldM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idxmngrapi.Index_manager/GetindexDataByFieldM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).GetindexDataByFieldM(ctx, req.(*SearchRequestM))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_GetIndexInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).GetIndexInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idxmngrapi.Index_manager/GetIndexInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).GetIndexInfo(ctx, req.(*IndexInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_GetIndexList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).GetIndexList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idxmngrapi.Index_manager/GetIndexList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).GetIndexList(ctx, req.(*IndexInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_GetQueryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).GetQueryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idxmngrapi.Index_manager/GetQueryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).GetQueryInfo(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexManager_ServiceDesc is the grpc.ServiceDesc for IndexManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idxmngrapi.Index_manager",
	HandlerType: (*IndexManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIndexRequest",
			Handler:    _IndexManager_CreateIndexRequest_Handler,
		},
		{
			MethodName: "UpdateIndexRequest",
			Handler:    _IndexManager_UpdateIndexRequest_Handler,
		},
		{
			MethodName: "GetindexDataByFieldM",
			Handler:    _IndexManager_GetindexDataByFieldM_Handler,
		},
		{
			MethodName: "GetIndexInfo",
			Handler:    _IndexManager_GetIndexInfo_Handler,
		},
		{
			MethodName: "GetIndexList",
			Handler:    _IndexManager_GetIndexList_Handler,
		},
		{
			MethodName: "GetQueryInfo",
			Handler:    _IndexManager_GetQueryInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertIndexRequest",
			Handler:       _IndexManager_InsertIndexRequest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/index_manager.proto",
}
