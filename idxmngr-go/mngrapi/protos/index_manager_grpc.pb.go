// btree index package for btree index module 2023-06-10
// created by myjang@etri.re.kr
// Update 2023-07-03

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protos/index_manager.proto

package mngrapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IndexManager_CreateIndexRequest_FullMethodName   = "/idxmngrapi.Index_manager/CreateIndexRequest"
	IndexManager_UpdateIndexRequest_FullMethodName   = "/idxmngrapi.Index_manager/UpdateIndexRequest"
	IndexManager_InsertIndexRequest_FullMethodName   = "/idxmngrapi.Index_manager/InsertIndexRequest"
	IndexManager_GetindexDataByFieldM_FullMethodName = "/idxmngrapi.Index_manager/GetindexDataByFieldM"
	IndexManager_GetIndexInfo_FullMethodName         = "/idxmngrapi.Index_manager/GetIndexInfo"
	IndexManager_GetIndexList_FullMethodName         = "/idxmngrapi.Index_manager/GetIndexList"
	IndexManager_GetQueryInfo_FullMethodName         = "/idxmngrapi.Index_manager/GetQueryInfo"
)

// IndexManagerClient is the client API for IndexManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexManagerClient interface {
	// for index server
	CreateIndexRequest(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error)
	UpdateIndexRequest(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error)
	InsertIndexRequest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[InsertDatatoIdx, IdxMngrResponse], error)
	GetindexDataByFieldM(ctx context.Context, in *SearchRequestM, opts ...grpc.CallOption) (*RstTxListM, error)
	// for idxmngr
	GetIndexInfo(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error)
	GetIndexList(ctx context.Context, in *IndexInfoRequest, opts ...grpc.CallOption) (*IndexList, error)
	GetQueryInfo(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryInfo, error)
}

type indexManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexManagerClient(cc grpc.ClientConnInterface) IndexManagerClient {
	return &indexManagerClient{cc}
}

func (c *indexManagerClient) CreateIndexRequest(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdxMngrResponse)
	err := c.cc.Invoke(ctx, IndexManager_CreateIndexRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) UpdateIndexRequest(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdxMngrResponse)
	err := c.cc.Invoke(ctx, IndexManager_UpdateIndexRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) InsertIndexRequest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[InsertDatatoIdx, IdxMngrResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IndexManager_ServiceDesc.Streams[0], IndexManager_InsertIndexRequest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InsertDatatoIdx, IdxMngrResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexManager_InsertIndexRequestClient = grpc.ClientStreamingClient[InsertDatatoIdx, IdxMngrResponse]

func (c *indexManagerClient) GetindexDataByFieldM(ctx context.Context, in *SearchRequestM, opts ...grpc.CallOption) (*RstTxListM, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RstTxListM)
	err := c.cc.Invoke(ctx, IndexManager_GetindexDataByFieldM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) GetIndexInfo(ctx context.Context, in *IndexInfo, opts ...grpc.CallOption) (*IdxMngrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdxMngrResponse)
	err := c.cc.Invoke(ctx, IndexManager_GetIndexInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) GetIndexList(ctx context.Context, in *IndexInfoRequest, opts ...grpc.CallOption) (*IndexList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexList)
	err := c.cc.Invoke(ctx, IndexManager_GetIndexList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexManagerClient) GetQueryInfo(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryInfo)
	err := c.cc.Invoke(ctx, IndexManager_GetQueryInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexManagerServer is the server API for IndexManager service.
// All implementations must embed UnimplementedIndexManagerServer
// for forward compatibility.
type IndexManagerServer interface {
	// for index server
	CreateIndexRequest(context.Context, *IndexInfo) (*IdxMngrResponse, error)
	UpdateIndexRequest(context.Context, *IndexInfo) (*IdxMngrResponse, error)
	InsertIndexRequest(grpc.ClientStreamingServer[InsertDatatoIdx, IdxMngrResponse]) error
	GetindexDataByFieldM(context.Context, *SearchRequestM) (*RstTxListM, error)
	// for idxmngr
	GetIndexInfo(context.Context, *IndexInfo) (*IdxMngrResponse, error)
	GetIndexList(context.Context, *IndexInfoRequest) (*IndexList, error)
	GetQueryInfo(context.Context, *QueryRequest) (*QueryInfo, error)
	mustEmbedUnimplementedIndexManagerServer()
}

// UnimplementedIndexManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndexManagerServer struct{}

func (UnimplementedIndexManagerServer) CreateIndexRequest(context.Context, *IndexInfo) (*IdxMngrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndexRequest not implemented")
}
func (UnimplementedIndexManagerServer) UpdateIndexRequest(context.Context, *IndexInfo) (*IdxMngrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndexRequest not implemented")
}
func (UnimplementedIndexManagerServer) InsertIndexRequest(grpc.ClientStreamingServer[InsertDatatoIdx, IdxMngrResponse]) error {
	return status.Errorf(codes.Unimplemented, "method InsertIndexRequest not implemented")
}
func (UnimplementedIndexManagerServer) GetindexDataByFieldM(context.Context, *SearchRequestM) (*RstTxListM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetindexDataByFieldM not implemented")
}
func (UnimplementedIndexManagerServer) GetIndexInfo(context.Context, *IndexInfo) (*IdxMngrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexInfo not implemented")
}
func (UnimplementedIndexManagerServer) GetIndexList(context.Context, *IndexInfoRequest) (*IndexList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexList not implemented")
}
func (UnimplementedIndexManagerServer) GetQueryInfo(context.Context, *QueryRequest) (*QueryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryInfo not implemented")
}
func (UnimplementedIndexManagerServer) mustEmbedUnimplementedIndexManagerServer() {}
func (UnimplementedIndexManagerServer) testEmbeddedByValue()                      {}

// UnsafeIndexManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexManagerServer will
// result in compilation errors.
type UnsafeIndexManagerServer interface {
	mustEmbedUnimplementedIndexManagerServer()
}

func RegisterIndexManagerServer(s grpc.ServiceRegistrar, srv IndexManagerServer) {
	// If the following call pancis, it indicates UnimplementedIndexManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IndexManager_ServiceDesc, srv)
}

func _IndexManager_CreateIndexRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).CreateIndexRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexManager_CreateIndexRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).CreateIndexRequest(ctx, req.(*IndexInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_UpdateIndexRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).UpdateIndexRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexManager_UpdateIndexRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).UpdateIndexRequest(ctx, req.(*IndexInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_InsertIndexRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IndexManagerServer).InsertIndexRequest(&grpc.GenericServerStream[InsertDatatoIdx, IdxMngrResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexManager_InsertIndexRequestServer = grpc.ClientStreamingServer[InsertDatatoIdx, IdxMngrResponse]

func _IndexManager_GetindexDataByFieldM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).GetindexDataByFieldM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexManager_GetindexDataByFieldM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).GetindexDataByFieldM(ctx, req.(*SearchRequestM))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_GetIndexInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).GetIndexInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexManager_GetIndexInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).GetIndexInfo(ctx, req.(*IndexInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_GetIndexList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).GetIndexList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexManager_GetIndexList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).GetIndexList(ctx, req.(*IndexInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexManager_GetQueryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexManagerServer).GetQueryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexManager_GetQueryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexManagerServer).GetQueryInfo(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexManager_ServiceDesc is the grpc.ServiceDesc for IndexManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idxmngrapi.Index_manager",
	HandlerType: (*IndexManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIndexRequest",
			Handler:    _IndexManager_CreateIndexRequest_Handler,
		},
		{
			MethodName: "UpdateIndexRequest",
			Handler:    _IndexManager_UpdateIndexRequest_Handler,
		},
		{
			MethodName: "GetindexDataByFieldM",
			Handler:    _IndexManager_GetindexDataByFieldM_Handler,
		},
		{
			MethodName: "GetIndexInfo",
			Handler:    _IndexManager_GetIndexInfo_Handler,
		},
		{
			MethodName: "GetIndexList",
			Handler:    _IndexManager_GetIndexList_Handler,
		},
		{
			MethodName: "GetQueryInfo",
			Handler:    _IndexManager_GetQueryInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertIndexRequest",
			Handler:       _IndexManager_InsertIndexRequest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/index_manager.proto",
}
