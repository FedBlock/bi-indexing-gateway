// btree index package for btree index module 2023-06-10
// created by myjang@etri.re.kr
// Update 2023-07-03

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: protos/index_manager.proto

package mngrapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComparisonOps int32

const (
	ComparisonOps_Eq            ComparisonOps = 0
	ComparisonOps_NotEq         ComparisonOps = 1
	ComparisonOps_Less          ComparisonOps = 2
	ComparisonOps_LessThanEq    ComparisonOps = 3
	ComparisonOps_Greater       ComparisonOps = 4
	ComparisonOps_GreaterThanEq ComparisonOps = 5
	ComparisonOps_Range         ComparisonOps = 6
	ComparisonOps_Knn           ComparisonOps = 7
)

// Enum value maps for ComparisonOps.
var (
	ComparisonOps_name = map[int32]string{
		0: "Eq",
		1: "NotEq",
		2: "Less",
		3: "LessThanEq",
		4: "Greater",
		5: "GreaterThanEq",
		6: "Range",
		7: "Knn",
	}
	ComparisonOps_value = map[string]int32{
		"Eq":            0,
		"NotEq":         1,
		"Less":          2,
		"LessThanEq":    3,
		"Greater":       4,
		"GreaterThanEq": 5,
		"Range":         6,
		"Knn":           7,
	}
)

func (x ComparisonOps) Enum() *ComparisonOps {
	p := new(ComparisonOps)
	*p = x
	return p
}

func (x ComparisonOps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOps) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_index_manager_proto_enumTypes[0].Descriptor()
}

func (ComparisonOps) Type() protoreflect.EnumType {
	return &file_protos_index_manager_proto_enumTypes[0]
}

func (x ComparisonOps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOps.Descriptor instead.
func (ComparisonOps) EnumDescriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{0}
}

type QueryCallHist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComOp  ComparisonOps `protobuf:"varint,1,opt,name=ComOp,proto3,enum=idxmngrapi.ComparisonOps" json:"ComOp,omitempty"`
	RstCnt int32         `protobuf:"varint,2,opt,name=RstCnt,proto3" json:"RstCnt,omitempty"`
}

func (x *QueryCallHist) Reset() {
	*x = QueryCallHist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCallHist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCallHist) ProtoMessage() {}

func (x *QueryCallHist) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCallHist.ProtoReflect.Descriptor instead.
func (*QueryCallHist) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{0}
}

func (x *QueryCallHist) GetComOp() ComparisonOps {
	if x != nil {
		return x.ComOp
	}
	return ComparisonOps_Eq
}

func (x *QueryCallHist) GetRstCnt() int32 {
	if x != nil {
		return x.RstCnt
	}
	return 0
}

// CreateIndex, GetIndexInfo
type IndexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID      string           `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	IndexName    string           `protobuf:"bytes,2,opt,name=IndexName,proto3" json:"IndexName,omitempty"`
	KeyCol       string           `protobuf:"bytes,3,opt,name=KeyCol,proto3" json:"KeyCol,omitempty"`
	FilePath     string           `protobuf:"bytes,4,opt,name=FilePath,proto3" json:"FilePath,omitempty"` //file index storage FilePath
	KeySize      int32            `protobuf:"varint,5,opt,name=KeySize,proto3" json:"KeySize,omitempty"`  //file index key size (byte)
	BlockNum     int32            `protobuf:"varint,6,opt,name=BlockNum,proto3" json:"BlockNum,omitempty"`
	CallCnt      int32            `protobuf:"varint,7,opt,name=CallCnt,proto3" json:"CallCnt,omitempty"`
	KeyCnt       int32            `protobuf:"varint,8,opt,name=KeyCnt,proto3" json:"KeyCnt,omitempty"`
	IndexDataCnt int32            `protobuf:"varint,9,opt,name=IndexDataCnt,proto3" json:"IndexDataCnt,omitempty"` // (IndexDataCnt/KeyCnt) = key duplication ratio
	Param        string           `protobuf:"bytes,10,opt,name=Param,proto3" json:"Param,omitempty"`
	QCnt         []*QueryCallHist `protobuf:"bytes,11,rep,name=QCnt,proto3" json:"QCnt,omitempty"`
}

func (x *IndexInfo) Reset() {
	*x = IndexInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInfo) ProtoMessage() {}

func (x *IndexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInfo.ProtoReflect.Descriptor instead.
func (*IndexInfo) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{1}
}

func (x *IndexInfo) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *IndexInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexInfo) GetKeyCol() string {
	if x != nil {
		return x.KeyCol
	}
	return ""
}

func (x *IndexInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *IndexInfo) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *IndexInfo) GetBlockNum() int32 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *IndexInfo) GetCallCnt() int32 {
	if x != nil {
		return x.CallCnt
	}
	return 0
}

func (x *IndexInfo) GetKeyCnt() int32 {
	if x != nil {
		return x.KeyCnt
	}
	return 0
}

func (x *IndexInfo) GetIndexDataCnt() int32 {
	if x != nil {
		return x.IndexDataCnt
	}
	return 0
}

func (x *IndexInfo) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *IndexInfo) GetQCnt() []*QueryCallHist {
	if x != nil {
		return x.QCnt
	}
	return nil
}

// GetIndexList
type IndexInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMsg string `protobuf:"bytes,1,opt,name=RequestMsg,proto3" json:"RequestMsg,omitempty"` //message for index list
	KeyCol     string `protobuf:"bytes,2,opt,name=KeyCol,proto3" json:"KeyCol,omitempty"`
	Param      string `protobuf:"bytes,3,opt,name=Param,proto3" json:"Param,omitempty"`
}

func (x *IndexInfoRequest) Reset() {
	*x = IndexInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInfoRequest) ProtoMessage() {}

func (x *IndexInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInfoRequest.ProtoReflect.Descriptor instead.
func (*IndexInfoRequest) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{2}
}

func (x *IndexInfoRequest) GetRequestMsg() string {
	if x != nil {
		return x.RequestMsg
	}
	return ""
}

func (x *IndexInfoRequest) GetKeyCol() string {
	if x != nil {
		return x.KeyCol
	}
	return ""
}

func (x *IndexInfoRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type IndexList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexCnt int32        `protobuf:"varint,1,opt,name=IndexCnt,proto3" json:"IndexCnt,omitempty"`
	IdxList  []*IndexInfo `protobuf:"bytes,2,rep,name=IdxList,proto3" json:"IdxList,omitempty"`
}

func (x *IndexList) Reset() {
	*x = IndexList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexList) ProtoMessage() {}

func (x *IndexList) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexList.ProtoReflect.Descriptor instead.
func (*IndexList) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{3}
}

func (x *IndexList) GetIndexCnt() int32 {
	if x != nil {
		return x.IndexCnt
	}
	return 0
}

func (x *IndexList) GetIdxList() []*IndexInfo {
	if x != nil {
		return x.IdxList
	}
	return nil
}

type BcDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId     string           `protobuf:"bytes,1,opt,name=TxId,proto3" json:"TxId,omitempty"`
	ObuId    string           `protobuf:"bytes,2,opt,name=ObuId,proto3" json:"ObuId,omitempty"` //updated(1004)
	KeyCol   string           `protobuf:"bytes,3,opt,name=key_col,json=keyCol,proto3" json:"key_col,omitempty"`
	Pvd      *PvdHistDataM    `protobuf:"bytes,4,opt,name=Pvd,proto3" json:"Pvd,omitempty"`
	Response *IdxMngrResponse `protobuf:"bytes,5,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *BcDataList) Reset() {
	*x = BcDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcDataList) ProtoMessage() {}

func (x *BcDataList) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcDataList.ProtoReflect.Descriptor instead.
func (*BcDataList) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{4}
}

func (x *BcDataList) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *BcDataList) GetObuId() string {
	if x != nil {
		return x.ObuId
	}
	return ""
}

func (x *BcDataList) GetKeyCol() string {
	if x != nil {
		return x.KeyCol
	}
	return ""
}

func (x *BcDataList) GetPvd() *PvdHistDataM {
	if x != nil {
		return x.Pvd
	}
	return nil
}

func (x *BcDataList) GetResponse() *IdxMngrResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type InsertDatatoIdx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID  string           `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	BcList   []*BcDataList    `protobuf:"bytes,2,rep,name=BcList,proto3" json:"BcList,omitempty"` //updated(1004)
	Response *IdxMngrResponse `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
	ColName  string           `protobuf:"bytes,4,opt,name=ColName,proto3" json:"ColName,omitempty"`
	X        float32          `protobuf:"fixed32,5,opt,name=x,proto3" json:"x,omitempty"`
	Y        float32          `protobuf:"fixed32,6,opt,name=y,proto3" json:"y,omitempty"`
	GeoHash  uint32           `protobuf:"varint,7,opt,name=GeoHash,proto3" json:"GeoHash,omitempty"`
	TxId     string           `protobuf:"bytes,8,opt,name=TxId,proto3" json:"TxId,omitempty"`
	OBU_ID   string           `protobuf:"bytes,9,opt,name=OBU_ID,json=OBUID,proto3" json:"OBU_ID,omitempty"`
	Time     uint64           `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`
	FilePath string           `protobuf:"bytes,11,opt,name=FilePath,proto3" json:"FilePath,omitempty"` //file index storage FilePath
	BlockNum int32            `protobuf:"varint,12,opt,name=BlockNum,proto3" json:"BlockNum,omitempty"`
}

func (x *InsertDatatoIdx) Reset() {
	*x = InsertDatatoIdx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertDatatoIdx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertDatatoIdx) ProtoMessage() {}

func (x *InsertDatatoIdx) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertDatatoIdx.ProtoReflect.Descriptor instead.
func (*InsertDatatoIdx) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{5}
}

func (x *InsertDatatoIdx) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *InsertDatatoIdx) GetBcList() []*BcDataList {
	if x != nil {
		return x.BcList
	}
	return nil
}

func (x *InsertDatatoIdx) GetResponse() *IdxMngrResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *InsertDatatoIdx) GetColName() string {
	if x != nil {
		return x.ColName
	}
	return ""
}

func (x *InsertDatatoIdx) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *InsertDatatoIdx) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *InsertDatatoIdx) GetGeoHash() uint32 {
	if x != nil {
		return x.GeoHash
	}
	return 0
}

func (x *InsertDatatoIdx) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *InsertDatatoIdx) GetOBU_ID() string {
	if x != nil {
		return x.OBU_ID
	}
	return ""
}

func (x *InsertDatatoIdx) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *InsertDatatoIdx) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *InsertDatatoIdx) GetBlockNum() int32 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

type IdxMngrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode    int32      `protobuf:"varint,1,opt,name=ResponseCode,proto3" json:"ResponseCode,omitempty"` // if 200 OK else Error
	ResponseMessage string     `protobuf:"bytes,2,opt,name=ResponseMessage,proto3" json:"ResponseMessage,omitempty"`
	Duration        int64      `protobuf:"varint,3,opt,name=Duration,proto3" json:"Duration,omitempty"` // NanoSeconds
	IndexID         string     `protobuf:"bytes,4,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	IndexStatus     *IndexInfo `protobuf:"bytes,5,opt,name=IndexStatus,proto3" json:"IndexStatus,omitempty"` //updated(1004)
}

func (x *IdxMngrResponse) Reset() {
	*x = IdxMngrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdxMngrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdxMngrResponse) ProtoMessage() {}

func (x *IdxMngrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdxMngrResponse.ProtoReflect.Descriptor instead.
func (*IdxMngrResponse) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{6}
}

func (x *IdxMngrResponse) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *IdxMngrResponse) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *IdxMngrResponse) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *IdxMngrResponse) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *IdxMngrResponse) GetIndexStatus() *IndexInfo {
	if x != nil {
		return x.IndexStatus
	}
	return nil
}

type SearchRequestM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID  string        `protobuf:"bytes,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"` //index id = used as a key
	Key      string        `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	TxId     string        `protobuf:"bytes,3,opt,name=TxId,proto3" json:"TxId,omitempty"`
	Field    string        `protobuf:"bytes,4,opt,name=Field,proto3" json:"Field,omitempty"`
	Value    string        `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	Begin    string        `protobuf:"bytes,6,opt,name=Begin,proto3" json:"Begin,omitempty"`
	End      string        `protobuf:"bytes,7,opt,name=End,proto3" json:"End,omitempty"`
	ComOp    ComparisonOps `protobuf:"varint,8,opt,name=ComOp,proto3,enum=idxmngrapi.ComparisonOps" json:"ComOp,omitempty"`
	X        float32       `protobuf:"fixed32,9,opt,name=x,proto3" json:"x,omitempty"`
	Y        float32       `protobuf:"fixed32,10,opt,name=y,proto3" json:"y,omitempty"`
	K        int32         `protobuf:"varint,11,opt,name=k,proto3" json:"k,omitempty"`
	Range    float32       `protobuf:"fixed32,12,opt,name=range,proto3" json:"range,omitempty"`
	FilePath string        `protobuf:"bytes,13,opt,name=FilePath,proto3" json:"FilePath,omitempty"` //file index storage FilePath
	KeySize  int32         `protobuf:"varint,14,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
}

func (x *SearchRequestM) Reset() {
	*x = SearchRequestM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequestM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequestM) ProtoMessage() {}

func (x *SearchRequestM) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequestM.ProtoReflect.Descriptor instead.
func (*SearchRequestM) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{7}
}

func (x *SearchRequestM) GetIndexID() string {
	if x != nil {
		return x.IndexID
	}
	return ""
}

func (x *SearchRequestM) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SearchRequestM) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SearchRequestM) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchRequestM) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SearchRequestM) GetBegin() string {
	if x != nil {
		return x.Begin
	}
	return ""
}

func (x *SearchRequestM) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *SearchRequestM) GetComOp() ComparisonOps {
	if x != nil {
		return x.ComOp
	}
	return ComparisonOps_Eq
}

func (x *SearchRequestM) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SearchRequestM) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *SearchRequestM) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *SearchRequestM) GetRange() float32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *SearchRequestM) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *SearchRequestM) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

type IndexValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId  string `protobuf:"bytes,1,opt,name=TxId,proto3" json:"TxId,omitempty"`
	ObuId string `protobuf:"bytes,2,opt,name=ObuId,proto3" json:"ObuId,omitempty"`
}

func (x *IndexValue) Reset() {
	*x = IndexValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexValue) ProtoMessage() {}

func (x *IndexValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexValue.ProtoReflect.Descriptor instead.
func (*IndexValue) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{8}
}

func (x *IndexValue) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *IndexValue) GetObuId() string {
	if x != nil {
		return x.ObuId
	}
	return ""
}

type RstTxListM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdxInfo *IndexInfo `protobuf:"bytes,1,opt,name=idxInfo,proto3" json:"idxInfo,omitempty"`
	Key     string     `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	IdxData []string   `protobuf:"bytes,3,rep,name=IdxData,proto3" json:"IdxData,omitempty"` //updated(1004)
}

func (x *RstTxListM) Reset() {
	*x = RstTxListM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RstTxListM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RstTxListM) ProtoMessage() {}

func (x *RstTxListM) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RstTxListM.ProtoReflect.Descriptor instead.
func (*RstTxListM) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{9}
}

func (x *RstTxListM) GetIdxInfo() *IndexInfo {
	if x != nil {
		return x.IdxInfo
	}
	return nil
}

func (x *RstTxListM) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RstTxListM) GetIdxData() []string {
	if x != nil {
		return x.IdxData
	}
	return nil
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComOp ComparisonOps `protobuf:"varint,1,opt,name=ComOp,proto3,enum=idxmngrapi.ComparisonOps" json:"ComOp,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{10}
}

func (x *QueryRequest) GetComOp() ComparisonOps {
	if x != nil {
		return x.ComOp
	}
	return ComparisonOps_Eq
}

type QueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComOp   ComparisonOps `protobuf:"varint,1,opt,name=ComOp,proto3,enum=idxmngrapi.ComparisonOps" json:"ComOp,omitempty"`
	RstSize int32         `protobuf:"varint,2,opt,name=RstSize,proto3" json:"RstSize,omitempty"`
	RunTime int64         `protobuf:"varint,3,opt,name=RunTime,proto3" json:"RunTime,omitempty"`
	RstMin  int32         `protobuf:"varint,4,opt,name=RstMin,proto3" json:"RstMin,omitempty"`
	RstMax  int32         `protobuf:"varint,5,opt,name=RstMax,proto3" json:"RstMax,omitempty"`
	RstMean int32         `protobuf:"varint,6,opt,name=RstMean,proto3" json:"RstMean,omitempty"`
}

func (x *QueryInfo) Reset() {
	*x = QueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInfo) ProtoMessage() {}

func (x *QueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInfo.ProtoReflect.Descriptor instead.
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{11}
}

func (x *QueryInfo) GetComOp() ComparisonOps {
	if x != nil {
		return x.ComOp
	}
	return ComparisonOps_Eq
}

func (x *QueryInfo) GetRstSize() int32 {
	if x != nil {
		return x.RstSize
	}
	return 0
}

func (x *QueryInfo) GetRunTime() int64 {
	if x != nil {
		return x.RunTime
	}
	return 0
}

func (x *QueryInfo) GetRstMin() int32 {
	if x != nil {
		return x.RstMin
	}
	return 0
}

func (x *QueryInfo) GetRstMax() int32 {
	if x != nil {
		return x.RstMax
	}
	return 0
}

func (x *QueryInfo) GetRstMean() int32 {
	if x != nil {
		return x.RstMean
	}
	return 0
}

type PvdHistDataM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObuId                string `protobuf:"bytes,1,opt,name=Obu_id,json=ObuId,proto3" json:"Obu_id,omitempty"`
	CollectionDt         string `protobuf:"bytes,2,opt,name=Collection_dt,json=CollectionDt,proto3" json:"Collection_dt,omitempty"`
	StartvectorLatitude  string `protobuf:"bytes,3,opt,name=Startvector_latitude,json=StartvectorLatitude,proto3" json:"Startvector_latitude,omitempty"`
	StartvectorLongitude string `protobuf:"bytes,4,opt,name=Startvector_longitude,json=StartvectorLongitude,proto3" json:"Startvector_longitude,omitempty"`
	Transmisstion        string `protobuf:"bytes,5,opt,name=Transmisstion,proto3" json:"Transmisstion,omitempty"`
	Speed                int32  `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	HazardLights         string `protobuf:"bytes,7,opt,name=Hazard_lights,json=HazardLights,proto3" json:"Hazard_lights,omitempty"`
	LeftTurnSignalOn     string `protobuf:"bytes,8,opt,name=Left_turn_signal_on,json=LeftTurnSignalOn,proto3" json:"Left_turn_signal_on,omitempty"`
	RightTurnSignalOn    string `protobuf:"bytes,9,opt,name=Right_turn_signal_on,json=RightTurnSignalOn,proto3" json:"Right_turn_signal_on,omitempty"`
	Steering             int32  `protobuf:"varint,10,opt,name=Steering,proto3" json:"Steering,omitempty"`
	Rpm                  int32  `protobuf:"varint,11,opt,name=Rpm,proto3" json:"Rpm,omitempty"`
	Footbrake            string `protobuf:"bytes,12,opt,name=Footbrake,proto3" json:"Footbrake,omitempty"`
	Gear                 string `protobuf:"bytes,13,opt,name=Gear,proto3" json:"Gear,omitempty"`
	Accelator            int32  `protobuf:"varint,14,opt,name=Accelator,proto3" json:"Accelator,omitempty"`
	Wipers               string `protobuf:"bytes,15,opt,name=Wipers,proto3" json:"Wipers,omitempty"`
	TireWarnLeftF        string `protobuf:"bytes,16,opt,name=Tire_warn_left_f,json=TireWarnLeftF,proto3" json:"Tire_warn_left_f,omitempty"`
	TireWarnLeftR        string `protobuf:"bytes,17,opt,name=Tire_warn_left_r,json=TireWarnLeftR,proto3" json:"Tire_warn_left_r,omitempty"`
	TireWarnRightF       string `protobuf:"bytes,18,opt,name=Tire_warn_right_f,json=TireWarnRightF,proto3" json:"Tire_warn_right_f,omitempty"`
	TireWarnRightR       string `protobuf:"bytes,19,opt,name=Tire_warn_right_r,json=TireWarnRightR,proto3" json:"Tire_warn_right_r,omitempty"`
	TirePsiLeftF         int32  `protobuf:"varint,20,opt,name=Tire_psi_left_f,json=TirePsiLeftF,proto3" json:"Tire_psi_left_f,omitempty"`
	TirePsiLeftR         int32  `protobuf:"varint,21,opt,name=Tire_psi_left_r,json=TirePsiLeftR,proto3" json:"Tire_psi_left_r,omitempty"`
	TirePsiRightF        int32  `protobuf:"varint,22,opt,name=Tire_psi_right_f,json=TirePsiRightF,proto3" json:"Tire_psi_right_f,omitempty"`
	TirePsiRightR        int32  `protobuf:"varint,23,opt,name=Tire_psi_right_r,json=TirePsiRightR,proto3" json:"Tire_psi_right_r,omitempty"`
	FuelPercent          int32  `protobuf:"varint,24,opt,name=Fuel_percent,json=FuelPercent,proto3" json:"Fuel_percent,omitempty"`
	FuelLiter            int32  `protobuf:"varint,25,opt,name=Fuel_liter,json=FuelLiter,proto3" json:"Fuel_liter,omitempty"`
	Totaldist            int32  `protobuf:"varint,26,opt,name=Totaldist,proto3" json:"Totaldist,omitempty"`
	RsuId                string `protobuf:"bytes,27,opt,name=Rsu_id,json=RsuId,proto3" json:"Rsu_id,omitempty"`
	MsgId                string `protobuf:"bytes,28,opt,name=Msg_id,json=MsgId,proto3" json:"Msg_id,omitempty"`
	StartvectorHeading   int32  `protobuf:"varint,29,opt,name=Startvector_heading,json=StartvectorHeading,proto3" json:"Startvector_heading,omitempty"`
	Address              string `protobuf:"bytes,30,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *PvdHistDataM) Reset() {
	*x = PvdHistDataM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_index_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvdHistDataM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvdHistDataM) ProtoMessage() {}

func (x *PvdHistDataM) ProtoReflect() protoreflect.Message {
	mi := &file_protos_index_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvdHistDataM.ProtoReflect.Descriptor instead.
func (*PvdHistDataM) Descriptor() ([]byte, []int) {
	return file_protos_index_manager_proto_rawDescGZIP(), []int{12}
}

func (x *PvdHistDataM) GetObuId() string {
	if x != nil {
		return x.ObuId
	}
	return ""
}

func (x *PvdHistDataM) GetCollectionDt() string {
	if x != nil {
		return x.CollectionDt
	}
	return ""
}

func (x *PvdHistDataM) GetStartvectorLatitude() string {
	if x != nil {
		return x.StartvectorLatitude
	}
	return ""
}

func (x *PvdHistDataM) GetStartvectorLongitude() string {
	if x != nil {
		return x.StartvectorLongitude
	}
	return ""
}

func (x *PvdHistDataM) GetTransmisstion() string {
	if x != nil {
		return x.Transmisstion
	}
	return ""
}

func (x *PvdHistDataM) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PvdHistDataM) GetHazardLights() string {
	if x != nil {
		return x.HazardLights
	}
	return ""
}

func (x *PvdHistDataM) GetLeftTurnSignalOn() string {
	if x != nil {
		return x.LeftTurnSignalOn
	}
	return ""
}

func (x *PvdHistDataM) GetRightTurnSignalOn() string {
	if x != nil {
		return x.RightTurnSignalOn
	}
	return ""
}

func (x *PvdHistDataM) GetSteering() int32 {
	if x != nil {
		return x.Steering
	}
	return 0
}

func (x *PvdHistDataM) GetRpm() int32 {
	if x != nil {
		return x.Rpm
	}
	return 0
}

func (x *PvdHistDataM) GetFootbrake() string {
	if x != nil {
		return x.Footbrake
	}
	return ""
}

func (x *PvdHistDataM) GetGear() string {
	if x != nil {
		return x.Gear
	}
	return ""
}

func (x *PvdHistDataM) GetAccelator() int32 {
	if x != nil {
		return x.Accelator
	}
	return 0
}

func (x *PvdHistDataM) GetWipers() string {
	if x != nil {
		return x.Wipers
	}
	return ""
}

func (x *PvdHistDataM) GetTireWarnLeftF() string {
	if x != nil {
		return x.TireWarnLeftF
	}
	return ""
}

func (x *PvdHistDataM) GetTireWarnLeftR() string {
	if x != nil {
		return x.TireWarnLeftR
	}
	return ""
}

func (x *PvdHistDataM) GetTireWarnRightF() string {
	if x != nil {
		return x.TireWarnRightF
	}
	return ""
}

func (x *PvdHistDataM) GetTireWarnRightR() string {
	if x != nil {
		return x.TireWarnRightR
	}
	return ""
}

func (x *PvdHistDataM) GetTirePsiLeftF() int32 {
	if x != nil {
		return x.TirePsiLeftF
	}
	return 0
}

func (x *PvdHistDataM) GetTirePsiLeftR() int32 {
	if x != nil {
		return x.TirePsiLeftR
	}
	return 0
}

func (x *PvdHistDataM) GetTirePsiRightF() int32 {
	if x != nil {
		return x.TirePsiRightF
	}
	return 0
}

func (x *PvdHistDataM) GetTirePsiRightR() int32 {
	if x != nil {
		return x.TirePsiRightR
	}
	return 0
}

func (x *PvdHistDataM) GetFuelPercent() int32 {
	if x != nil {
		return x.FuelPercent
	}
	return 0
}

func (x *PvdHistDataM) GetFuelLiter() int32 {
	if x != nil {
		return x.FuelLiter
	}
	return 0
}

func (x *PvdHistDataM) GetTotaldist() int32 {
	if x != nil {
		return x.Totaldist
	}
	return 0
}

func (x *PvdHistDataM) GetRsuId() string {
	if x != nil {
		return x.RsuId
	}
	return ""
}

func (x *PvdHistDataM) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *PvdHistDataM) GetStartvectorHeading() int32 {
	if x != nil {
		return x.StartvectorHeading
	}
	return 0
}

func (x *PvdHistDataM) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

var File_protos_index_manager_proto protoreflect.FileDescriptor

var file_protos_index_manager_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x69, 0x64,
	0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x22, 0x58, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x43, 0x6f, 0x6d,
	0x4f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e,
	0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x4f, 0x70, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6d, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x73,
	0x74, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x73, 0x74, 0x43,
	0x6e, 0x74, 0x22, 0xc8, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x43,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4b,
	0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x4b, 0x65, 0x79, 0x43, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4b, 0x65,
	0x79, 0x43, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d,
	0x0a, 0x04, 0x51, 0x43, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69,
	0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x52, 0x04, 0x51, 0x43, 0x6e, 0x74, 0x22, 0x60, 0x0a,
	0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x58, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x49, 0x64, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x64, 0x78, 0x6d,
	0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x49, 0x64, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x42, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4f, 0x62, 0x75, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x62,
	0x75, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x03,
	0x50, 0x76, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x64, 0x78, 0x6d,
	0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x48, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x52, 0x03, 0x50, 0x76, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x64, 0x78,
	0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x78, 0x4d, 0x6e, 0x67, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xdc, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x74, 0x6f, 0x49, 0x64, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x06, 0x42, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x42, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x64, 0x78, 0x4d, 0x6e, 0x67, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x47, 0x65, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x4f, 0x42, 0x55, 0x5f, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f,
	0x42, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x22, 0xce, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x78, 0x4d, 0x6e, 0x67, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xcb, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x43, 0x6f, 0x6d, 0x4f,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67,
	0x72, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f,
	0x70, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6d, 0x4f, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x36, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x62, 0x75, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4f, 0x62, 0x75, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0a, 0x52, 0x73, 0x74, 0x54, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x64, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x69,
	0x64, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x64, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x49, 0x64, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x3f, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x43, 0x6f, 0x6d, 0x4f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6d, 0x4f, 0x70, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x43, 0x6f, 0x6d, 0x4f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6d,
	0x4f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x52,
	0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x73, 0x74, 0x4d, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x52, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x73, 0x74, 0x4d, 0x65, 0x61,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x6e,
	0x22, 0xaa, 0x08, 0x0a, 0x0c, 0x50, 0x76, 0x64, 0x48, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x12, 0x15, 0x0a, 0x06, 0x4f, 0x62, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4f, 0x62, 0x75, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x12, 0x31, 0x0a,
	0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x4c, 0x65, 0x66, 0x74, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x52, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x70, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x52, 0x70, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x6f, 0x74, 0x62, 0x72, 0x61, 0x6b,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x6f, 0x74, 0x62, 0x72, 0x61,
	0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x65, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x47, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x70, 0x65, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x69, 0x70, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x10,
	0x54, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x66,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x4c, 0x65, 0x66, 0x74, 0x46, 0x12, 0x27, 0x0a, 0x10, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x54, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x12, 0x29,
	0x0a, 0x11, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x69, 0x72, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x12, 0x29, 0x0a, 0x11, 0x54, 0x69, 0x72,
	0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x12, 0x25, 0x0a, 0x0f, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x73, 0x69,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54,
	0x69, 0x72, 0x65, 0x50, 0x73, 0x69, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x12, 0x25, 0x0a, 0x0f, 0x54,
	0x69, 0x72, 0x65, 0x5f, 0x70, 0x73, 0x69, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x69, 0x72, 0x65, 0x50, 0x73, 0x69, 0x4c, 0x65, 0x66,
	0x74, 0x52, 0x12, 0x27, 0x0a, 0x10, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x73, 0x69, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x69,
	0x72, 0x65, 0x50, 0x73, 0x69, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x12, 0x27, 0x0a, 0x10, 0x54,
	0x69, 0x72, 0x65, 0x5f, 0x70, 0x73, 0x69, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x69, 0x72, 0x65, 0x50, 0x73, 0x69, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x12, 0x21, 0x0a, 0x0c, 0x46, 0x75, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x75, 0x65, 0x6c,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x46, 0x75, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x75, 0x65,
	0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x64,
	0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x64, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x52, 0x73, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x73, 0x75, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x4d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x70, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x12, 0x06,
	0x0a, 0x02, 0x45, 0x71, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x6e, 0x6e, 0x10, 0x07, 0x32,
	0x8b, 0x04, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67,
	0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1b,
	0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x78, 0x4d,
	0x6e, 0x67, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1b, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e,
	0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x78, 0x4d, 0x6e, 0x67, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x69, 0x64,
	0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x74, 0x6f, 0x49, 0x64, 0x78, 0x1a, 0x1b, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e,
	0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x78, 0x4d, 0x6e, 0x67, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x12,
	0x1a, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x1a, 0x16, 0x2e, 0x69, 0x64,
	0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x73, 0x74, 0x54, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1b, 0x2e, 0x69, 0x64, 0x78,
	0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x78, 0x4d, 0x6e, 0x67, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67,
	0x72, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x69,
	0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72,
	0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x5a,
	0x12, 0x69, 0x64, 0x78, 0x6d, 0x6e, 0x67, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x6d, 0x6e, 0x67, 0x72,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_index_manager_proto_rawDescOnce sync.Once
	file_protos_index_manager_proto_rawDescData = file_protos_index_manager_proto_rawDesc
)

func file_protos_index_manager_proto_rawDescGZIP() []byte {
	file_protos_index_manager_proto_rawDescOnce.Do(func() {
		file_protos_index_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_index_manager_proto_rawDescData)
	})
	return file_protos_index_manager_proto_rawDescData
}

var file_protos_index_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_index_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_protos_index_manager_proto_goTypes = []interface{}{
	(ComparisonOps)(0),       // 0: idxmngrapi.ComparisonOps
	(*QueryCallHist)(nil),    // 1: idxmngrapi.QueryCallHist
	(*IndexInfo)(nil),        // 2: idxmngrapi.IndexInfo
	(*IndexInfoRequest)(nil), // 3: idxmngrapi.IndexInfoRequest
	(*IndexList)(nil),        // 4: idxmngrapi.IndexList
	(*BcDataList)(nil),       // 5: idxmngrapi.BcData_list
	(*InsertDatatoIdx)(nil),  // 6: idxmngrapi.InsertDatatoIdx
	(*IdxMngrResponse)(nil),  // 7: idxmngrapi.IdxMngrResponse
	(*SearchRequestM)(nil),   // 8: idxmngrapi.SearchRequestM
	(*IndexValue)(nil),       // 9: idxmngrapi.IndexValue
	(*RstTxListM)(nil),       // 10: idxmngrapi.RstTxListM
	(*QueryRequest)(nil),     // 11: idxmngrapi.QueryRequest
	(*QueryInfo)(nil),        // 12: idxmngrapi.QueryInfo
	(*PvdHistDataM)(nil),     // 13: idxmngrapi.PvdHistDataM
}
var file_protos_index_manager_proto_depIdxs = []int32{
	0,  // 0: idxmngrapi.QueryCallHist.ComOp:type_name -> idxmngrapi.ComparisonOps
	1,  // 1: idxmngrapi.IndexInfo.QCnt:type_name -> idxmngrapi.QueryCallHist
	2,  // 2: idxmngrapi.IndexList.IdxList:type_name -> idxmngrapi.IndexInfo
	13, // 3: idxmngrapi.BcData_list.Pvd:type_name -> idxmngrapi.PvdHistDataM
	7,  // 4: idxmngrapi.BcData_list.Response:type_name -> idxmngrapi.IdxMngrResponse
	5,  // 5: idxmngrapi.InsertDatatoIdx.BcList:type_name -> idxmngrapi.BcData_list
	7,  // 6: idxmngrapi.InsertDatatoIdx.Response:type_name -> idxmngrapi.IdxMngrResponse
	2,  // 7: idxmngrapi.IdxMngrResponse.IndexStatus:type_name -> idxmngrapi.IndexInfo
	0,  // 8: idxmngrapi.SearchRequestM.ComOp:type_name -> idxmngrapi.ComparisonOps
	2,  // 9: idxmngrapi.RstTxListM.idxInfo:type_name -> idxmngrapi.IndexInfo
	0,  // 10: idxmngrapi.QueryRequest.ComOp:type_name -> idxmngrapi.ComparisonOps
	0,  // 11: idxmngrapi.QueryInfo.ComOp:type_name -> idxmngrapi.ComparisonOps
	2,  // 12: idxmngrapi.Index_manager.CreateIndexRequest:input_type -> idxmngrapi.IndexInfo
	2,  // 13: idxmngrapi.Index_manager.UpdateIndexRequest:input_type -> idxmngrapi.IndexInfo
	6,  // 14: idxmngrapi.Index_manager.InsertIndexRequest:input_type -> idxmngrapi.InsertDatatoIdx
	8,  // 15: idxmngrapi.Index_manager.GetindexDataByFieldM:input_type -> idxmngrapi.SearchRequestM
	2,  // 16: idxmngrapi.Index_manager.GetIndexInfo:input_type -> idxmngrapi.IndexInfo
	3,  // 17: idxmngrapi.Index_manager.GetIndexList:input_type -> idxmngrapi.IndexInfoRequest
	11, // 18: idxmngrapi.Index_manager.GetQueryInfo:input_type -> idxmngrapi.QueryRequest
	7,  // 19: idxmngrapi.Index_manager.CreateIndexRequest:output_type -> idxmngrapi.IdxMngrResponse
	7,  // 20: idxmngrapi.Index_manager.UpdateIndexRequest:output_type -> idxmngrapi.IdxMngrResponse
	7,  // 21: idxmngrapi.Index_manager.InsertIndexRequest:output_type -> idxmngrapi.IdxMngrResponse
	10, // 22: idxmngrapi.Index_manager.GetindexDataByFieldM:output_type -> idxmngrapi.RstTxListM
	7,  // 23: idxmngrapi.Index_manager.GetIndexInfo:output_type -> idxmngrapi.IdxMngrResponse
	4,  // 24: idxmngrapi.Index_manager.GetIndexList:output_type -> idxmngrapi.IndexList
	12, // 25: idxmngrapi.Index_manager.GetQueryInfo:output_type -> idxmngrapi.QueryInfo
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protos_index_manager_proto_init() }
func file_protos_index_manager_proto_init() {
	if File_protos_index_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_index_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCallHist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertDatatoIdx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdxMngrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequestM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RstTxListM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_index_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvdHistDataM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_index_manager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_index_manager_proto_goTypes,
		DependencyIndexes: file_protos_index_manager_proto_depIdxs,
		EnumInfos:         file_protos_index_manager_proto_enumTypes,
		MessageInfos:      file_protos_index_manager_proto_msgTypes,
	}.Build()
	File_protos_index_manager_proto = out.File
	file_protos_index_manager_proto_rawDesc = nil
	file_protos_index_manager_proto_goTypes = nil
	file_protos_index_manager_proto_depIdxs = nil
}
