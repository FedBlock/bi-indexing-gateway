// pvd-hist package for Connect Manager 2022-09-22
// created by dmsul@etri.re.kr
// Update 2022-11-03

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.30.0--dev
// source: pvd_hist.proto

package pvdapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComparisonOperators int32

const (
	ComparisonOperators_Equal            ComparisonOperators = 0
	ComparisonOperators_NotEqual         ComparisonOperators = 1
	ComparisonOperators_LessThan         ComparisonOperators = 2
	ComparisonOperators_LessThanEqual    ComparisonOperators = 3
	ComparisonOperators_GreaterThan      ComparisonOperators = 4
	ComparisonOperators_GreaterThanEqual ComparisonOperators = 5
)

// Enum value maps for ComparisonOperators.
var (
	ComparisonOperators_name = map[int32]string{
		0: "Equal",
		1: "NotEqual",
		2: "LessThan",
		3: "LessThanEqual",
		4: "GreaterThan",
		5: "GreaterThanEqual",
	}
	ComparisonOperators_value = map[string]int32{
		"Equal":            0,
		"NotEqual":         1,
		"LessThan":         2,
		"LessThanEqual":    3,
		"GreaterThan":      4,
		"GreaterThanEqual": 5,
	}
)

func (x ComparisonOperators) Enum() *ComparisonOperators {
	p := new(ComparisonOperators)
	*p = x
	return p
}

func (x ComparisonOperators) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOperators) Descriptor() protoreflect.EnumDescriptor {
	return file_pvd_hist_proto_enumTypes[0].Descriptor()
}

func (ComparisonOperators) Type() protoreflect.EnumType {
	return &file_pvd_hist_proto_enumTypes[0]
}

func (x ComparisonOperators) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOperators.Descriptor instead.
func (ComparisonOperators) EnumDescriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{0}
}

type ChainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string       `protobuf:"bytes,1,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	Chaincode   string       `protobuf:"bytes,2,opt,name=Chaincode,proto3" json:"Chaincode,omitempty"`
	Height      int32        `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`
	Start       int32        `protobuf:"varint,4,opt,name=Start,proto3" json:"Start,omitempty"`
	End         int32        `protobuf:"varint,5,opt,name=End,proto3" json:"End,omitempty"`
	Response    *PvdResponse `protobuf:"bytes,6,opt,name=Response,proto3" json:"Response,omitempty"`
	Nodes       []string     `protobuf:"bytes,7,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (x *ChainInfo) Reset() {
	*x = ChainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainInfo) ProtoMessage() {}

func (x *ChainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainInfo.ProtoReflect.Descriptor instead.
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{0}
}

func (x *ChainInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *ChainInfo) GetChaincode() string {
	if x != nil {
		return x.Chaincode
	}
	return ""
}

func (x *ChainInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ChainInfo) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ChainInfo) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ChainInfo) GetResponse() *PvdResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ChainInfo) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type QueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string       `protobuf:"bytes,1,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	Chaincode   string       `protobuf:"bytes,2,opt,name=Chaincode,proto3" json:"Chaincode,omitempty"`
	Key         string       `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Filter      string       `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Response    *PvdResponse `protobuf:"bytes,5,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *QueryInfo) Reset() {
	*x = QueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInfo) ProtoMessage() {}

func (x *QueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInfo.ProtoReflect.Descriptor instead.
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{1}
}

func (x *QueryInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *QueryInfo) GetChaincode() string {
	if x != nil {
		return x.Chaincode
	}
	return ""
}

func (x *QueryInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *QueryInfo) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *QueryInfo) GetResponse() *PvdResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type SinglePvd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainInfo *ChainInfo `protobuf:"bytes,1,opt,name=ChainInfo,proto3" json:"ChainInfo,omitempty"`
	Pvd       *PvdHist   `protobuf:"bytes,2,opt,name=Pvd,proto3" json:"Pvd,omitempty"`
}

func (x *SinglePvd) Reset() {
	*x = SinglePvd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinglePvd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinglePvd) ProtoMessage() {}

func (x *SinglePvd) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinglePvd.ProtoReflect.Descriptor instead.
func (*SinglePvd) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{2}
}

func (x *SinglePvd) GetChainInfo() *ChainInfo {
	if x != nil {
		return x.ChainInfo
	}
	return nil
}

func (x *SinglePvd) GetPvd() *PvdHist {
	if x != nil {
		return x.Pvd
	}
	return nil
}

type FieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainInfo *ChainInfo          `protobuf:"bytes,1,opt,name=ChainInfo,proto3" json:"ChainInfo,omitempty"`
	Key       string              `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	TxId      string              `protobuf:"bytes,3,opt,name=TxId,proto3" json:"TxId,omitempty"`
	Field     string              `protobuf:"bytes,4,opt,name=Field,proto3" json:"Field,omitempty"`
	Value     string              `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	ComOp     ComparisonOperators `protobuf:"varint,6,opt,name=ComOp,proto3,enum=pvdapi.ComparisonOperators" json:"ComOp,omitempty"`
}

func (x *FieldInfo) Reset() {
	*x = FieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldInfo) ProtoMessage() {}

func (x *FieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldInfo.ProtoReflect.Descriptor instead.
func (*FieldInfo) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{3}
}

func (x *FieldInfo) GetChainInfo() *ChainInfo {
	if x != nil {
		return x.ChainInfo
	}
	return nil
}

func (x *FieldInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FieldInfo) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *FieldInfo) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FieldInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FieldInfo) GetComOp() ComparisonOperators {
	if x != nil {
		return x.ComOp
	}
	return ComparisonOperators_Equal
}

type TimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainInfo *ChainInfo `protobuf:"bytes,1,opt,name=ChainInfo,proto3" json:"ChainInfo,omitempty"`
	Start     string     `protobuf:"bytes,2,opt,name=Start,proto3" json:"Start,omitempty"`
	End       string     `protobuf:"bytes,3,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *TimeInfo) Reset() {
	*x = TimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInfo) ProtoMessage() {}

func (x *TimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInfo.ProtoReflect.Descriptor instead.
func (*TimeInfo) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{4}
}

func (x *TimeInfo) GetChainInfo() *ChainInfo {
	if x != nil {
		return x.ChainInfo
	}
	return nil
}

func (x *TimeInfo) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *TimeInfo) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type MultiField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldList []*FieldInfo `protobuf:"bytes,1,rep,name=FieldList,proto3" json:"FieldList,omitempty"`
}

func (x *MultiField) Reset() {
	*x = MultiField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiField) ProtoMessage() {}

func (x *MultiField) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiField.ProtoReflect.Descriptor instead.
func (*MultiField) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{5}
}

func (x *MultiField) GetFieldList() []*FieldInfo {
	if x != nil {
		return x.FieldList
	}
	return nil
}

type MultiPvd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainInfo *ChainInfo   `protobuf:"bytes,1,opt,name=ChainInfo,proto3" json:"ChainInfo,omitempty"`
	PvdList   []*PvdHist   `protobuf:"bytes,2,rep,name=PvdList,proto3" json:"PvdList,omitempty"`
	Response  *PvdResponse `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *MultiPvd) Reset() {
	*x = MultiPvd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiPvd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiPvd) ProtoMessage() {}

func (x *MultiPvd) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiPvd.ProtoReflect.Descriptor instead.
func (*MultiPvd) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{6}
}

func (x *MultiPvd) GetChainInfo() *ChainInfo {
	if x != nil {
		return x.ChainInfo
	}
	return nil
}

func (x *MultiPvd) GetPvdList() []*PvdHist {
	if x != nil {
		return x.PvdList
	}
	return nil
}

func (x *MultiPvd) GetResponse() *PvdResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type TxList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainInfo *ChainInfo `protobuf:"bytes,1,opt,name=ChainInfo,proto3" json:"ChainInfo,omitempty"`
	Key       string     `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	TxId      []string   `protobuf:"bytes,3,rep,name=TxId,proto3" json:"TxId,omitempty"`
}

func (x *TxList) Reset() {
	*x = TxList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxList) ProtoMessage() {}

func (x *TxList) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxList.ProtoReflect.Descriptor instead.
func (*TxList) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{7}
}

func (x *TxList) GetChainInfo() *ChainInfo {
	if x != nil {
		return x.ChainInfo
	}
	return nil
}

func (x *TxList) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TxList) GetTxId() []string {
	if x != nil {
		return x.TxId
	}
	return nil
}

type PvdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode    int32  `protobuf:"varint,1,opt,name=Response_code,json=ResponseCode,proto3" json:"Response_code,omitempty"` // if 200 OK else Error
	ResponseMessage string `protobuf:"bytes,2,opt,name=Response_message,json=ResponseMessage,proto3" json:"Response_message,omitempty"`
	TxId            string `protobuf:"bytes,3,opt,name=TxId,proto3" json:"TxId,omitempty"`
	Duration        int64  `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"` // NanoSeconds
}

func (x *PvdResponse) Reset() {
	*x = PvdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvdResponse) ProtoMessage() {}

func (x *PvdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvdResponse.ProtoReflect.Descriptor instead.
func (*PvdResponse) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{8}
}

func (x *PvdResponse) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *PvdResponse) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *PvdResponse) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *PvdResponse) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type BcData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId     string       `protobuf:"bytes,1,opt,name=TxId,proto3" json:"TxId,omitempty"`
	Pvd      *PvdHist     `protobuf:"bytes,2,opt,name=Pvd,proto3" json:"Pvd,omitempty"`
	Response *PvdResponse `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *BcData) Reset() {
	*x = BcData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcData) ProtoMessage() {}

func (x *BcData) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcData.ProtoReflect.Descriptor instead.
func (*BcData) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{9}
}

func (x *BcData) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *BcData) GetPvd() *PvdHist {
	if x != nil {
		return x.Pvd
	}
	return nil
}

func (x *BcData) GetResponse() *PvdResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type MultiData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    int32        `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	BcList   []*BcData    `protobuf:"bytes,2,rep,name=BcList,proto3" json:"BcList,omitempty"`
	Response *PvdResponse `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *MultiData) Reset() {
	*x = MultiData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiData) ProtoMessage() {}

func (x *MultiData) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiData.ProtoReflect.Descriptor instead.
func (*MultiData) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{10}
}

func (x *MultiData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MultiData) GetBcList() []*BcData {
	if x != nil {
		return x.BcList
	}
	return nil
}

func (x *MultiData) GetResponse() *PvdResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type TxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode int32        `protobuf:"varint,1,opt,name=Response_code,json=ResponseCode,proto3" json:"Response_code,omitempty"`
	TxId         string       `protobuf:"bytes,2,opt,name=TxId,proto3" json:"TxId,omitempty"`
	Pvd          *PvdHist     `protobuf:"bytes,3,opt,name=Pvd,proto3" json:"Pvd,omitempty"`
	Response     *PvdResponse `protobuf:"bytes,4,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *TxData) Reset() {
	*x = TxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxData) ProtoMessage() {}

func (x *TxData) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxData.ProtoReflect.Descriptor instead.
func (*TxData) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{11}
}

func (x *TxData) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *TxData) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TxData) GetPvd() *PvdHist {
	if x != nil {
		return x.Pvd
	}
	return nil
}

func (x *TxData) GetResponse() *PvdResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type TxListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainInfo *ChainInfo   `protobuf:"bytes,1,opt,name=ChainInfo,proto3" json:"ChainInfo,omitempty"`
	ListDatas []*TxData    `protobuf:"bytes,2,rep,name=ListDatas,proto3" json:"ListDatas,omitempty"`
	Response  *PvdResponse `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *TxListData) Reset() {
	*x = TxListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxListData) ProtoMessage() {}

func (x *TxListData) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxListData.ProtoReflect.Descriptor instead.
func (*TxListData) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{12}
}

func (x *TxListData) GetChainInfo() *ChainInfo {
	if x != nil {
		return x.ChainInfo
	}
	return nil
}

func (x *TxListData) GetListDatas() []*TxData {
	if x != nil {
		return x.ListDatas
	}
	return nil
}

func (x *TxListData) GetResponse() *PvdResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type PvdHist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObuId                string `protobuf:"bytes,1,opt,name=Obu_id,json=ObuId,proto3" json:"Obu_id,omitempty"`
	CollectionDt         string `protobuf:"bytes,2,opt,name=Collection_dt,json=CollectionDt,proto3" json:"Collection_dt,omitempty"`
	StartvectorLatitude  string `protobuf:"bytes,3,opt,name=Startvector_latitude,json=StartvectorLatitude,proto3" json:"Startvector_latitude,omitempty"`
	StartvectorLongitude string `protobuf:"bytes,4,opt,name=Startvector_longitude,json=StartvectorLongitude,proto3" json:"Startvector_longitude,omitempty"`
	Transmisstion        string `protobuf:"bytes,5,opt,name=Transmisstion,proto3" json:"Transmisstion,omitempty"`
	Speed                int32  `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	HazardLights         string `protobuf:"bytes,7,opt,name=Hazard_lights,json=HazardLights,proto3" json:"Hazard_lights,omitempty"`
	LeftTurnSignalOn     string `protobuf:"bytes,8,opt,name=Left_turn_signal_on,json=LeftTurnSignalOn,proto3" json:"Left_turn_signal_on,omitempty"`
	RightTurnSignalOn    string `protobuf:"bytes,9,opt,name=Right_turn_signal_on,json=RightTurnSignalOn,proto3" json:"Right_turn_signal_on,omitempty"`
	Steering             int32  `protobuf:"varint,10,opt,name=Steering,proto3" json:"Steering,omitempty"`
	Rpm                  int32  `protobuf:"varint,11,opt,name=Rpm,proto3" json:"Rpm,omitempty"`
	Footbrake            string `protobuf:"bytes,12,opt,name=Footbrake,proto3" json:"Footbrake,omitempty"`
	Gear                 string `protobuf:"bytes,13,opt,name=Gear,proto3" json:"Gear,omitempty"`
	Accelator            int32  `protobuf:"varint,14,opt,name=Accelator,proto3" json:"Accelator,omitempty"`
	Wipers               string `protobuf:"bytes,15,opt,name=Wipers,proto3" json:"Wipers,omitempty"`
	TireWarnLeftF        string `protobuf:"bytes,16,opt,name=Tire_warn_left_f,json=TireWarnLeftF,proto3" json:"Tire_warn_left_f,omitempty"`
	TireWarnLeftR        string `protobuf:"bytes,17,opt,name=Tire_warn_left_r,json=TireWarnLeftR,proto3" json:"Tire_warn_left_r,omitempty"`
	TireWarnRightF       string `protobuf:"bytes,18,opt,name=Tire_warn_right_f,json=TireWarnRightF,proto3" json:"Tire_warn_right_f,omitempty"`
	TireWarnRightR       string `protobuf:"bytes,19,opt,name=Tire_warn_right_r,json=TireWarnRightR,proto3" json:"Tire_warn_right_r,omitempty"`
	TirePsiLeftF         int32  `protobuf:"varint,20,opt,name=Tire_psi_left_f,json=TirePsiLeftF,proto3" json:"Tire_psi_left_f,omitempty"`
	TirePsiLeftR         int32  `protobuf:"varint,21,opt,name=Tire_psi_left_r,json=TirePsiLeftR,proto3" json:"Tire_psi_left_r,omitempty"`
	TirePsiRightF        int32  `protobuf:"varint,22,opt,name=Tire_psi_right_f,json=TirePsiRightF,proto3" json:"Tire_psi_right_f,omitempty"`
	TirePsiRightR        int32  `protobuf:"varint,23,opt,name=Tire_psi_right_r,json=TirePsiRightR,proto3" json:"Tire_psi_right_r,omitempty"`
	FuelPercent          int32  `protobuf:"varint,24,opt,name=Fuel_percent,json=FuelPercent,proto3" json:"Fuel_percent,omitempty"`
	FuelLiter            int32  `protobuf:"varint,25,opt,name=Fuel_liter,json=FuelLiter,proto3" json:"Fuel_liter,omitempty"`
	Totaldist            int32  `protobuf:"varint,26,opt,name=Totaldist,proto3" json:"Totaldist,omitempty"`
	RsuId                string `protobuf:"bytes,27,opt,name=Rsu_id,json=RsuId,proto3" json:"Rsu_id,omitempty"`
	MsgId                string `protobuf:"bytes,28,opt,name=Msg_id,json=MsgId,proto3" json:"Msg_id,omitempty"`
	StartvectorHeading   int32  `protobuf:"varint,29,opt,name=Startvector_heading,json=StartvectorHeading,proto3" json:"Startvector_heading,omitempty"`
	K   int32  `protobuf:"varint,30,opt,name=K,json=K,proto3" json:"K,omitempty"`
	Range   int32  `protobuf:"varint,31,opt,name=Range,json=Range,proto3" json:"Range,omitempty"`
}

func (x *PvdHist) Reset() {
	*x = PvdHist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pvd_hist_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvdHist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvdHist) ProtoMessage() {}

func (x *PvdHist) ProtoReflect() protoreflect.Message {
	mi := &file_pvd_hist_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvdHist.ProtoReflect.Descriptor instead.
func (*PvdHist) Descriptor() ([]byte, []int) {
	return file_pvd_hist_proto_rawDescGZIP(), []int{13}
}

func (x *PvdHist) GetObuId() string {
	if x != nil {
		return x.ObuId
	}
	return ""
}

func (x *PvdHist) GetCollectionDt() string {
	if x != nil {
		return x.CollectionDt
	}
	return ""
}

func (x *PvdHist) GetStartvectorLatitude() string {
	if x != nil {
		return x.StartvectorLatitude
	}
	return ""
}

func (x *PvdHist) GetStartvectorLongitude() string {
	if x != nil {
		return x.StartvectorLongitude
	}
	return ""
}

func (x *PvdHist) GetTransmisstion() string {
	if x != nil {
		return x.Transmisstion
	}
	return ""
}

func (x *PvdHist) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PvdHist) GetHazardLights() string {
	if x != nil {
		return x.HazardLights
	}
	return ""
}

func (x *PvdHist) GetLeftTurnSignalOn() string {
	if x != nil {
		return x.LeftTurnSignalOn
	}
	return ""
}

func (x *PvdHist) GetRightTurnSignalOn() string {
	if x != nil {
		return x.RightTurnSignalOn
	}
	return ""
}

func (x *PvdHist) GetSteering() int32 {
	if x != nil {
		return x.Steering
	}
	return 0
}

func (x *PvdHist) GetRpm() int32 {
	if x != nil {
		return x.Rpm
	}
	return 0
}

func (x *PvdHist) GetFootbrake() string {
	if x != nil {
		return x.Footbrake
	}
	return ""
}

func (x *PvdHist) GetGear() string {
	if x != nil {
		return x.Gear
	}
	return ""
}

func (x *PvdHist) GetAccelator() int32 {
	if x != nil {
		return x.Accelator
	}
	return 0
}

func (x *PvdHist) GetWipers() string {
	if x != nil {
		return x.Wipers
	}
	return ""
}

func (x *PvdHist) GetTireWarnLeftF() string {
	if x != nil {
		return x.TireWarnLeftF
	}
	return ""
}

func (x *PvdHist) GetTireWarnLeftR() string {
	if x != nil {
		return x.TireWarnLeftR
	}
	return ""
}

func (x *PvdHist) GetTireWarnRightF() string {
	if x != nil {
		return x.TireWarnRightF
	}
	return ""
}

func (x *PvdHist) GetTireWarnRightR() string {
	if x != nil {
		return x.TireWarnRightR
	}
	return ""
}

func (x *PvdHist) GetTirePsiLeftF() int32 {
	if x != nil {
		return x.TirePsiLeftF
	}
	return 0
}

func (x *PvdHist) GetTirePsiLeftR() int32 {
	if x != nil {
		return x.TirePsiLeftR
	}
	return 0
}

func (x *PvdHist) GetTirePsiRightF() int32 {
	if x != nil {
		return x.TirePsiRightF
	}
	return 0
}

func (x *PvdHist) GetTirePsiRightR() int32 {
	if x != nil {
		return x.TirePsiRightR
	}
	return 0
}

func (x *PvdHist) GetFuelPercent() int32 {
	if x != nil {
		return x.FuelPercent
	}
	return 0
}

func (x *PvdHist) GetFuelLiter() int32 {
	if x != nil {
		return x.FuelLiter
	}
	return 0
}

func (x *PvdHist) GetTotaldist() int32 {
	if x != nil {
		return x.Totaldist
	}
	return 0
}

func (x *PvdHist) GetRsuId() string {
	if x != nil {
		return x.RsuId
	}
	return ""
}

func (x *PvdHist) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *PvdHist) GetStartvectorHeading() int32 {
	if x != nil {
		return x.StartvectorHeading
	}
	return 0
}
func (x *PvdHist) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}
func (x *PvdHist) GetRange() int32 {
	if x != nil {
		return x.Range
	}
	return 0
}

var File_pvd_hist_proto protoreflect.FileDescriptor

var file_pvd_hist_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x76, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x22, 0xd2, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x76, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa6, 0x01,
	0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x76, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x09, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x50, 0x76, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x03, 0x50, 0x76, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x52, 0x03, 0x50, 0x76, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x43, 0x6f, 0x6d, 0x4f,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6d, 0x4f, 0x70, 0x22, 0x63, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x76, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e, 0x64,
	0x22, 0x3d, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2f,
	0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x97, 0x01, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x76, 0x64, 0x12, 0x2f, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a,
	0x07, 0x50, 0x76, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x48, 0x69, 0x73, 0x74, 0x52,
	0x07, 0x50, 0x76, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x76, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x06, 0x54, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x50,
	0x76, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x06, 0x42, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x50, 0x76, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x76, 0x64, 0x48, 0x69, 0x73, 0x74, 0x52, 0x03, 0x50, 0x76, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x09,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x26, 0x0a, 0x06, 0x42, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x42, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x76, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x06, 0x54, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x03,
	0x50, 0x76, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x76, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x48, 0x69, 0x73, 0x74, 0x52, 0x03, 0x50, 0x76, 0x64, 0x12,
	0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x2f,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8b, 0x08, 0x0a, 0x07, 0x50, 0x76, 0x64, 0x48, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x4f,
	0x62, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x62, 0x75,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x48,
	0x61, 0x7a, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x2d, 0x0a, 0x13, 0x4c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c,
	0x65, 0x66, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x12,
	0x2f, 0x0a, 0x14, 0x52, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x70, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x70, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x46, 0x6f, 0x6f, 0x74, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x46, 0x6f, 0x6f, 0x74, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x47, 0x65, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x65, 0x61, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x57, 0x69, 0x70, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x57, 0x69, 0x70, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x54, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x12,
	0x27, 0x0a, 0x10, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x69, 0x72, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x12, 0x29, 0x0a, 0x11, 0x54, 0x69, 0x72, 0x65,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x46, 0x12, 0x29, 0x0a, 0x11, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x54, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x12, 0x25,
	0x0a, 0x0f, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x73, 0x69, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x69, 0x72, 0x65, 0x50, 0x73, 0x69,
	0x4c, 0x65, 0x66, 0x74, 0x46, 0x12, 0x25, 0x0a, 0x0f, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x73,
	0x69, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x54, 0x69, 0x72, 0x65, 0x50, 0x73, 0x69, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x12, 0x27, 0x0a, 0x10,
	0x54, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x73, 0x69, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x69, 0x72, 0x65, 0x50, 0x73, 0x69, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x46, 0x12, 0x27, 0x0a, 0x10, 0x54, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x73,
	0x69, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x54, 0x69, 0x72, 0x65, 0x50, 0x73, 0x69, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x12, 0x21,
	0x0a, 0x0c, 0x46, 0x75, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x75, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x46, 0x75, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x75, 0x65, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x64, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x64, 0x69, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x52, 0x73, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x52, 0x73, 0x75, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2a, 0x76, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x10, 0x05, 0x32, 0xcb, 0x08, 0x0a, 0x03, 0x50, 0x76, 0x64, 0x12, 0x2c, 0x0a,
	0x07, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x76, 0x64, 0x1a, 0x0e, 0x2e, 0x70, 0x76,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x70,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x76, 0x64, 0x1a, 0x13, 0x2e, 0x70, 0x76, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x76, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x0b, 0x70, 0x75, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x2e,
	0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x0e, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x30, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x28, 0x01, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x0e,
	0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11,
	0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x76,
	0x64, 0x1a, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x54, 0x78, 0x49, 0x44, 0x12, 0x0e, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x70, 0x76, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x76, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01,
	0x12, 0x35, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x54, 0x78, 0x49, 0x44, 0x12, 0x0e, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x70,
	0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x63, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x3b,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x10, 0x67,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x10, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0c,
	0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x70,
	0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11,
	0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x67,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x70,
	0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61,
	0x74, 0x61, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x76, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x67, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x70,
	0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x33, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x52, 0x69, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x11, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x76, 0x64, 0x12, 0x3c, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x52, 0x69, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x11, 0x2e, 0x70,
	0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x10, 0x2e, 0x70, 0x76, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x76,
	0x64, 0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x6f, 0x2f, 0x70,
	0x76, 0x64, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pvd_hist_proto_rawDescOnce sync.Once
	file_pvd_hist_proto_rawDescData = file_pvd_hist_proto_rawDesc
)

func file_pvd_hist_proto_rawDescGZIP() []byte {
	file_pvd_hist_proto_rawDescOnce.Do(func() {
		file_pvd_hist_proto_rawDescData = protoimpl.X.CompressGZIP(file_pvd_hist_proto_rawDescData)
	})
	return file_pvd_hist_proto_rawDescData
}

var file_pvd_hist_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pvd_hist_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_pvd_hist_proto_goTypes = []interface{}{
	(ComparisonOperators)(0), // 0: pvdapi.ComparisonOperators
	(*ChainInfo)(nil),        // 1: pvdapi.ChainInfo
	(*QueryInfo)(nil),        // 2: pvdapi.QueryInfo
	(*SinglePvd)(nil),        // 3: pvdapi.SinglePvd
	(*FieldInfo)(nil),        // 4: pvdapi.FieldInfo
	(*TimeInfo)(nil),         // 5: pvdapi.TimeInfo
	(*MultiField)(nil),       // 6: pvdapi.MultiField
	(*MultiPvd)(nil),         // 7: pvdapi.MultiPvd
	(*TxList)(nil),           // 8: pvdapi.TxList
	(*PvdResponse)(nil),      // 9: pvdapi.PvdResponse
	(*BcData)(nil),           // 10: pvdapi.BcData
	(*MultiData)(nil),        // 11: pvdapi.MultiData
	(*TxData)(nil),           // 12: pvdapi.TxData
	(*TxListData)(nil),       // 13: pvdapi.TxListData
	(*PvdHist)(nil),          // 14: pvdapi.PvdHist
}
var file_pvd_hist_proto_depIdxs = []int32{
	9,  // 0: pvdapi.ChainInfo.Response:type_name -> pvdapi.PvdResponse
	9,  // 1: pvdapi.QueryInfo.Response:type_name -> pvdapi.PvdResponse
	1,  // 2: pvdapi.SinglePvd.ChainInfo:type_name -> pvdapi.ChainInfo
	14, // 3: pvdapi.SinglePvd.Pvd:type_name -> pvdapi.PvdHist
	1,  // 4: pvdapi.FieldInfo.ChainInfo:type_name -> pvdapi.ChainInfo
	0,  // 5: pvdapi.FieldInfo.ComOp:type_name -> pvdapi.ComparisonOperators
	1,  // 6: pvdapi.TimeInfo.ChainInfo:type_name -> pvdapi.ChainInfo
	4,  // 7: pvdapi.MultiField.FieldList:type_name -> pvdapi.FieldInfo
	1,  // 8: pvdapi.MultiPvd.ChainInfo:type_name -> pvdapi.ChainInfo
	14, // 9: pvdapi.MultiPvd.PvdList:type_name -> pvdapi.PvdHist
	9,  // 10: pvdapi.MultiPvd.Response:type_name -> pvdapi.PvdResponse
	1,  // 11: pvdapi.TxList.ChainInfo:type_name -> pvdapi.ChainInfo
	14, // 12: pvdapi.BcData.Pvd:type_name -> pvdapi.PvdHist
	9,  // 13: pvdapi.BcData.Response:type_name -> pvdapi.PvdResponse
	10, // 14: pvdapi.MultiData.BcList:type_name -> pvdapi.BcData
	9,  // 15: pvdapi.MultiData.Response:type_name -> pvdapi.PvdResponse
	14, // 16: pvdapi.TxData.Pvd:type_name -> pvdapi.PvdHist
	9,  // 17: pvdapi.TxData.Response:type_name -> pvdapi.PvdResponse
	1,  // 18: pvdapi.TxListData.ChainInfo:type_name -> pvdapi.ChainInfo
	12, // 19: pvdapi.TxListData.ListDatas:type_name -> pvdapi.TxData
	9,  // 20: pvdapi.TxListData.Response:type_name -> pvdapi.PvdResponse
	3,  // 21: pvdapi.Pvd.getData:input_type -> pvdapi.SinglePvd
	3,  // 22: pvdapi.Pvd.putData:input_type -> pvdapi.SinglePvd
	1,  // 23: pvdapi.Pvd.putBulkData:input_type -> pvdapi.ChainInfo
	11, // 24: pvdapi.Pvd.putMultiData:input_type -> pvdapi.MultiData
	3,  // 25: pvdapi.Pvd.getHistoryData:input_type -> pvdapi.SinglePvd
	8,  // 26: pvdapi.Pvd.getDataByTxID:input_type -> pvdapi.TxList
	8,  // 27: pvdapi.Pvd.getDataByTxList:input_type -> pvdapi.TxList
	8,  // 28: pvdapi.Pvd.getDataByKeyTxID:input_type -> pvdapi.TxList
	4,  // 29: pvdapi.Pvd.getDataByField:input_type -> pvdapi.FieldInfo
	4,  // 30: pvdapi.Pvd.getAllDataByField:input_type -> pvdapi.FieldInfo
	5,  // 31: pvdapi.Pvd.getAllDataByTime:input_type -> pvdapi.TimeInfo
	1,  // 32: pvdapi.Pvd.getAllData:input_type -> pvdapi.ChainInfo
	1,  // 33: pvdapi.Pvd.getChainInfo:input_type -> pvdapi.ChainInfo
	1,  // 34: pvdapi.Pvd.getBlock:input_type -> pvdapi.ChainInfo
	1,  // 35: pvdapi.Pvd.getAllBlock:input_type -> pvdapi.ChainInfo
	1,  // 36: pvdapi.Pvd.getRangeBlock:input_type -> pvdapi.ChainInfo
	1,  // 37: pvdapi.Pvd.getWorldState:input_type -> pvdapi.ChainInfo
	1,  // 38: pvdapi.Pvd.getKeyLists:input_type -> pvdapi.ChainInfo
	2,  // 39: pvdapi.Pvd.getRichQuery:input_type -> pvdapi.QueryInfo
	2,  // 40: pvdapi.Pvd.getRichQueryHistory:input_type -> pvdapi.QueryInfo
	12, // 41: pvdapi.Pvd.getData:output_type -> pvdapi.TxData
	9,  // 42: pvdapi.Pvd.putData:output_type -> pvdapi.PvdResponse
	12, // 43: pvdapi.Pvd.putBulkData:output_type -> pvdapi.TxData
	11, // 44: pvdapi.Pvd.putMultiData:output_type -> pvdapi.MultiData
	11, // 45: pvdapi.Pvd.getHistoryData:output_type -> pvdapi.MultiData
	12, // 46: pvdapi.Pvd.getDataByTxID:output_type -> pvdapi.TxData
	13, // 47: pvdapi.Pvd.getDataByTxList:output_type -> pvdapi.TxListData
	11, // 48: pvdapi.Pvd.getDataByKeyTxID:output_type -> pvdapi.MultiData
	10, // 49: pvdapi.Pvd.getDataByField:output_type -> pvdapi.BcData
	11, // 50: pvdapi.Pvd.getAllDataByField:output_type -> pvdapi.MultiData
	11, // 51: pvdapi.Pvd.getAllDataByTime:output_type -> pvdapi.MultiData
	11, // 52: pvdapi.Pvd.getAllData:output_type -> pvdapi.MultiData
	1,  // 53: pvdapi.Pvd.getChainInfo:output_type -> pvdapi.ChainInfo
	11, // 54: pvdapi.Pvd.getBlock:output_type -> pvdapi.MultiData
	11, // 55: pvdapi.Pvd.getAllBlock:output_type -> pvdapi.MultiData
	11, // 56: pvdapi.Pvd.getRangeBlock:output_type -> pvdapi.MultiData
	7,  // 57: pvdapi.Pvd.getWorldState:output_type -> pvdapi.MultiPvd
	6,  // 58: pvdapi.Pvd.getKeyLists:output_type -> pvdapi.MultiField
	7,  // 59: pvdapi.Pvd.getRichQuery:output_type -> pvdapi.MultiPvd
	7,  // 60: pvdapi.Pvd.getRichQueryHistory:output_type -> pvdapi.MultiPvd
	41, // [41:61] is the sub-list for method output_type
	21, // [21:41] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_pvd_hist_proto_init() }
func file_pvd_hist_proto_init() {
	if File_pvd_hist_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pvd_hist_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinglePvd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiPvd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pvd_hist_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvdHist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pvd_hist_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pvd_hist_proto_goTypes,
		DependencyIndexes: file_pvd_hist_proto_depIdxs,
		EnumInfos:         file_pvd_hist_proto_enumTypes,
		MessageInfos:      file_pvd_hist_proto_msgTypes,
	}.Build()
	File_pvd_hist_proto = out.File
	file_pvd_hist_proto_rawDesc = nil
	file_pvd_hist_proto_goTypes = nil
	file_pvd_hist_proto_depIdxs = nil
}
