// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.30.0--dev
// source: pvd_hist.proto

package pvdapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PvdClient is the client API for Pvd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PvdClient interface {
	// get TX data(WorldStats) for SinglePvd.Pvd.Obu_id
	GetData(ctx context.Context, in *SinglePvd, opts ...grpc.CallOption) (*TxData, error)
	// put SinglePvd.Pvd into BC return PvdRespone.TxId
	PutData(ctx context.Context, in *SinglePvd, opts ...grpc.CallOption) (*PvdResponse, error)
	// putBulkData deprecated user putMultiData
	PutBulkData(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (Pvd_PutBulkDataClient, error)
	// putMultiData is put raw data to BC
	PutMultiData(ctx context.Context, opts ...grpc.CallOption) (Pvd_PutMultiDataClient, error)
	// get History Datas for SinglePvd.Pvd.Obu_id
	GetHistoryData(ctx context.Context, in *SinglePvd, opts ...grpc.CallOption) (*MultiData, error)
	// get TX datas for TxList.TxID[]
	GetDataByTxID(ctx context.Context, in *TxList, opts ...grpc.CallOption) (Pvd_GetDataByTxIDClient, error)
	// get TX List datas for TxList.TxID[]
	GetDataByTxList(ctx context.Context, in *TxList, opts ...grpc.CallOption) (Pvd_GetDataByTxListClient, error)
	// just test code not use
	GetDataByKeyTxID(ctx context.Context, in *TxList, opts ...grpc.CallOption) (*MultiData, error)
	// getDataByField is find matching field for world states
	GetDataByField(ctx context.Context, in *FieldInfo, opts ...grpc.CallOption) (Pvd_GetDataByFieldClient, error)
	// just test code not use
	GetAllDataByField(ctx context.Context, in *FieldInfo, opts ...grpc.CallOption) (Pvd_GetAllDataByFieldClient, error)
	// just test code not use
	GetAllDataByTime(ctx context.Context, in *TimeInfo, opts ...grpc.CallOption) (Pvd_GetAllDataByTimeClient, error)
	// just test code not use
	GetAllData(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (Pvd_GetAllDataClient, error)
	// get chain info Height
	GetChainInfo(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (*ChainInfo, error)
	// get Block for ChainInfo.Height
	GetBlock(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (*MultiData, error)
	// getAllBlock : ChianInfo.Height value is start block number
	// return MuliData.Index is block number
	GetAllBlock(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (Pvd_GetAllBlockClient, error)
	// getRangeBlock : ChianInfo.Start value is start block number
	// return MuliData.Index is block number
	GetRangeBlock(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (Pvd_GetRangeBlockClient, error)
	// get current WorldStates
	GetWorldState(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (*MultiPvd, error)
	// get KeyLists
	GetKeyLists(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (*MultiField, error)
	// get rich query for WorldStates
	GetRichQuery(ctx context.Context, in *QueryInfo, opts ...grpc.CallOption) (*MultiPvd, error)
	// get rich query for History
	GetRichQueryHistory(ctx context.Context, in *QueryInfo, opts ...grpc.CallOption) (Pvd_GetRichQueryHistoryClient, error)
}

type pvdClient struct {
	cc grpc.ClientConnInterface
}

func NewPvdClient(cc grpc.ClientConnInterface) PvdClient {
	return &pvdClient{cc}
}

func (c *pvdClient) GetData(ctx context.Context, in *SinglePvd, opts ...grpc.CallOption) (*TxData, error) {
	out := new(TxData)
	err := c.cc.Invoke(ctx, "/pvdapi.Pvd/getData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvdClient) PutData(ctx context.Context, in *SinglePvd, opts ...grpc.CallOption) (*PvdResponse, error) {
	out := new(PvdResponse)
	err := c.cc.Invoke(ctx, "/pvdapi.Pvd/putData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvdClient) PutBulkData(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (Pvd_PutBulkDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[0], "/pvdapi.Pvd/putBulkData", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdPutBulkDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_PutBulkDataClient interface {
	Recv() (*TxData, error)
	grpc.ClientStream
}

type pvdPutBulkDataClient struct {
	grpc.ClientStream
}

func (x *pvdPutBulkDataClient) Recv() (*TxData, error) {
	m := new(TxData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) PutMultiData(ctx context.Context, opts ...grpc.CallOption) (Pvd_PutMultiDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[1], "/pvdapi.Pvd/putMultiData", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdPutMultiDataClient{stream}
	return x, nil
}

type Pvd_PutMultiDataClient interface {
	Send(*MultiData) error
	Recv() (*MultiData, error)
	grpc.ClientStream
}

type pvdPutMultiDataClient struct {
	grpc.ClientStream
}

func (x *pvdPutMultiDataClient) Send(m *MultiData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pvdPutMultiDataClient) Recv() (*MultiData, error) {
	m := new(MultiData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) GetHistoryData(ctx context.Context, in *SinglePvd, opts ...grpc.CallOption) (*MultiData, error) {
	out := new(MultiData)
	err := c.cc.Invoke(ctx, "/pvdapi.Pvd/getHistoryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvdClient) GetDataByTxID(ctx context.Context, in *TxList, opts ...grpc.CallOption) (Pvd_GetDataByTxIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[2], "/pvdapi.Pvd/getDataByTxID", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdGetDataByTxIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_GetDataByTxIDClient interface {
	Recv() (*TxData, error)
	grpc.ClientStream
}

type pvdGetDataByTxIDClient struct {
	grpc.ClientStream
}

func (x *pvdGetDataByTxIDClient) Recv() (*TxData, error) {
	m := new(TxData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) GetDataByTxList(ctx context.Context, in *TxList, opts ...grpc.CallOption) (Pvd_GetDataByTxListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[3], "/pvdapi.Pvd/getDataByTxList", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdGetDataByTxListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_GetDataByTxListClient interface {
	Recv() (*TxListData, error)
	grpc.ClientStream
}

type pvdGetDataByTxListClient struct {
	grpc.ClientStream
}

func (x *pvdGetDataByTxListClient) Recv() (*TxListData, error) {
	m := new(TxListData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) GetDataByKeyTxID(ctx context.Context, in *TxList, opts ...grpc.CallOption) (*MultiData, error) {
	out := new(MultiData)
	err := c.cc.Invoke(ctx, "/pvdapi.Pvd/getDataByKeyTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvdClient) GetDataByField(ctx context.Context, in *FieldInfo, opts ...grpc.CallOption) (Pvd_GetDataByFieldClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[4], "/pvdapi.Pvd/getDataByField", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdGetDataByFieldClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_GetDataByFieldClient interface {
	Recv() (*BcData, error)
	grpc.ClientStream
}

type pvdGetDataByFieldClient struct {
	grpc.ClientStream
}

func (x *pvdGetDataByFieldClient) Recv() (*BcData, error) {
	m := new(BcData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) GetAllDataByField(ctx context.Context, in *FieldInfo, opts ...grpc.CallOption) (Pvd_GetAllDataByFieldClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[5], "/pvdapi.Pvd/getAllDataByField", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdGetAllDataByFieldClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_GetAllDataByFieldClient interface {
	Recv() (*MultiData, error)
	grpc.ClientStream
}

type pvdGetAllDataByFieldClient struct {
	grpc.ClientStream
}

func (x *pvdGetAllDataByFieldClient) Recv() (*MultiData, error) {
	m := new(MultiData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) GetAllDataByTime(ctx context.Context, in *TimeInfo, opts ...grpc.CallOption) (Pvd_GetAllDataByTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[6], "/pvdapi.Pvd/getAllDataByTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdGetAllDataByTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_GetAllDataByTimeClient interface {
	Recv() (*MultiData, error)
	grpc.ClientStream
}

type pvdGetAllDataByTimeClient struct {
	grpc.ClientStream
}

func (x *pvdGetAllDataByTimeClient) Recv() (*MultiData, error) {
	m := new(MultiData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) GetAllData(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (Pvd_GetAllDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[7], "/pvdapi.Pvd/getAllData", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdGetAllDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_GetAllDataClient interface {
	Recv() (*MultiData, error)
	grpc.ClientStream
}

type pvdGetAllDataClient struct {
	grpc.ClientStream
}

func (x *pvdGetAllDataClient) Recv() (*MultiData, error) {
	m := new(MultiData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) GetChainInfo(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (*ChainInfo, error) {
	out := new(ChainInfo)
	err := c.cc.Invoke(ctx, "/pvdapi.Pvd/getChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvdClient) GetBlock(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (*MultiData, error) {
	out := new(MultiData)
	err := c.cc.Invoke(ctx, "/pvdapi.Pvd/getBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvdClient) GetAllBlock(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (Pvd_GetAllBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[8], "/pvdapi.Pvd/getAllBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdGetAllBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_GetAllBlockClient interface {
	Recv() (*MultiData, error)
	grpc.ClientStream
}

type pvdGetAllBlockClient struct {
	grpc.ClientStream
}

func (x *pvdGetAllBlockClient) Recv() (*MultiData, error) {
	m := new(MultiData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) GetRangeBlock(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (Pvd_GetRangeBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[9], "/pvdapi.Pvd/getRangeBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdGetRangeBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_GetRangeBlockClient interface {
	Recv() (*MultiData, error)
	grpc.ClientStream
}

type pvdGetRangeBlockClient struct {
	grpc.ClientStream
}

func (x *pvdGetRangeBlockClient) Recv() (*MultiData, error) {
	m := new(MultiData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pvdClient) GetWorldState(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (*MultiPvd, error) {
	out := new(MultiPvd)
	err := c.cc.Invoke(ctx, "/pvdapi.Pvd/getWorldState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvdClient) GetKeyLists(ctx context.Context, in *ChainInfo, opts ...grpc.CallOption) (*MultiField, error) {
	out := new(MultiField)
	err := c.cc.Invoke(ctx, "/pvdapi.Pvd/getKeyLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvdClient) GetRichQuery(ctx context.Context, in *QueryInfo, opts ...grpc.CallOption) (*MultiPvd, error) {
	out := new(MultiPvd)
	err := c.cc.Invoke(ctx, "/pvdapi.Pvd/getRichQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvdClient) GetRichQueryHistory(ctx context.Context, in *QueryInfo, opts ...grpc.CallOption) (Pvd_GetRichQueryHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pvd_ServiceDesc.Streams[10], "/pvdapi.Pvd/getRichQueryHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &pvdGetRichQueryHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pvd_GetRichQueryHistoryClient interface {
	Recv() (*MultiPvd, error)
	grpc.ClientStream
}

type pvdGetRichQueryHistoryClient struct {
	grpc.ClientStream
}

func (x *pvdGetRichQueryHistoryClient) Recv() (*MultiPvd, error) {
	m := new(MultiPvd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PvdServer is the server API for Pvd service.
// All implementations must embed UnimplementedPvdServer
// for forward compatibility
type PvdServer interface {
	// get TX data(WorldStats) for SinglePvd.Pvd.Obu_id
	GetData(context.Context, *SinglePvd) (*TxData, error)
	// put SinglePvd.Pvd into BC return PvdRespone.TxId
	PutData(context.Context, *SinglePvd) (*PvdResponse, error)
	// putBulkData deprecated user putMultiData
	PutBulkData(*ChainInfo, Pvd_PutBulkDataServer) error
	// putMultiData is put raw data to BC
	PutMultiData(Pvd_PutMultiDataServer) error
	// get History Datas for SinglePvd.Pvd.Obu_id
	GetHistoryData(context.Context, *SinglePvd) (*MultiData, error)
	// get TX datas for TxList.TxID[]
	GetDataByTxID(*TxList, Pvd_GetDataByTxIDServer) error
	// get TX List datas for TxList.TxID[]
	GetDataByTxList(*TxList, Pvd_GetDataByTxListServer) error
	// just test code not use
	GetDataByKeyTxID(context.Context, *TxList) (*MultiData, error)
	// getDataByField is find matching field for world states
	GetDataByField(*FieldInfo, Pvd_GetDataByFieldServer) error
	// just test code not use
	GetAllDataByField(*FieldInfo, Pvd_GetAllDataByFieldServer) error
	// just test code not use
	GetAllDataByTime(*TimeInfo, Pvd_GetAllDataByTimeServer) error
	// just test code not use
	GetAllData(*ChainInfo, Pvd_GetAllDataServer) error
	// get chain info Height
	GetChainInfo(context.Context, *ChainInfo) (*ChainInfo, error)
	// get Block for ChainInfo.Height
	GetBlock(context.Context, *ChainInfo) (*MultiData, error)
	// getAllBlock : ChianInfo.Height value is start block number
	// return MuliData.Index is block number
	GetAllBlock(*ChainInfo, Pvd_GetAllBlockServer) error
	// getRangeBlock : ChianInfo.Start value is start block number
	// return MuliData.Index is block number
	GetRangeBlock(*ChainInfo, Pvd_GetRangeBlockServer) error
	// get current WorldStates
	GetWorldState(context.Context, *ChainInfo) (*MultiPvd, error)
	// get KeyLists
	GetKeyLists(context.Context, *ChainInfo) (*MultiField, error)
	// get rich query for WorldStates
	GetRichQuery(context.Context, *QueryInfo) (*MultiPvd, error)
	// get rich query for History
	GetRichQueryHistory(*QueryInfo, Pvd_GetRichQueryHistoryServer) error
	mustEmbedUnimplementedPvdServer()
}

// UnimplementedPvdServer must be embedded to have forward compatible implementations.
type UnimplementedPvdServer struct {
}

func (UnimplementedPvdServer) GetData(context.Context, *SinglePvd) (*TxData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedPvdServer) PutData(context.Context, *SinglePvd) (*PvdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutData not implemented")
}
func (UnimplementedPvdServer) PutBulkData(*ChainInfo, Pvd_PutBulkDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PutBulkData not implemented")
}
func (UnimplementedPvdServer) PutMultiData(Pvd_PutMultiDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PutMultiData not implemented")
}
func (UnimplementedPvdServer) GetHistoryData(context.Context, *SinglePvd) (*MultiData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryData not implemented")
}
func (UnimplementedPvdServer) GetDataByTxID(*TxList, Pvd_GetDataByTxIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataByTxID not implemented")
}
func (UnimplementedPvdServer) GetDataByTxList(*TxList, Pvd_GetDataByTxListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataByTxList not implemented")
}
func (UnimplementedPvdServer) GetDataByKeyTxID(context.Context, *TxList) (*MultiData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataByKeyTxID not implemented")
}
func (UnimplementedPvdServer) GetDataByField(*FieldInfo, Pvd_GetDataByFieldServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataByField not implemented")
}
func (UnimplementedPvdServer) GetAllDataByField(*FieldInfo, Pvd_GetAllDataByFieldServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllDataByField not implemented")
}
func (UnimplementedPvdServer) GetAllDataByTime(*TimeInfo, Pvd_GetAllDataByTimeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllDataByTime not implemented")
}
func (UnimplementedPvdServer) GetAllData(*ChainInfo, Pvd_GetAllDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllData not implemented")
}
func (UnimplementedPvdServer) GetChainInfo(context.Context, *ChainInfo) (*ChainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainInfo not implemented")
}
func (UnimplementedPvdServer) GetBlock(context.Context, *ChainInfo) (*MultiData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedPvdServer) GetAllBlock(*ChainInfo, Pvd_GetAllBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBlock not implemented")
}
func (UnimplementedPvdServer) GetRangeBlock(*ChainInfo, Pvd_GetRangeBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRangeBlock not implemented")
}
func (UnimplementedPvdServer) GetWorldState(context.Context, *ChainInfo) (*MultiPvd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorldState not implemented")
}
func (UnimplementedPvdServer) GetKeyLists(context.Context, *ChainInfo) (*MultiField, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyLists not implemented")
}
func (UnimplementedPvdServer) GetRichQuery(context.Context, *QueryInfo) (*MultiPvd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRichQuery not implemented")
}
func (UnimplementedPvdServer) GetRichQueryHistory(*QueryInfo, Pvd_GetRichQueryHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRichQueryHistory not implemented")
}
func (UnimplementedPvdServer) mustEmbedUnimplementedPvdServer() {}

// UnsafePvdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PvdServer will
// result in compilation errors.
type UnsafePvdServer interface {
	mustEmbedUnimplementedPvdServer()
}

func RegisterPvdServer(s grpc.ServiceRegistrar, srv PvdServer) {
	s.RegisterService(&Pvd_ServiceDesc, srv)
}

func _Pvd_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePvd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvdServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvdapi.Pvd/getData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvdServer).GetData(ctx, req.(*SinglePvd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvd_PutData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePvd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvdServer).PutData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvdapi.Pvd/putData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvdServer).PutData(ctx, req.(*SinglePvd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvd_PutBulkData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChainInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).PutBulkData(m, &pvdPutBulkDataServer{stream})
}

type Pvd_PutBulkDataServer interface {
	Send(*TxData) error
	grpc.ServerStream
}

type pvdPutBulkDataServer struct {
	grpc.ServerStream
}

func (x *pvdPutBulkDataServer) Send(m *TxData) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvd_PutMultiData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PvdServer).PutMultiData(&pvdPutMultiDataServer{stream})
}

type Pvd_PutMultiDataServer interface {
	Send(*MultiData) error
	Recv() (*MultiData, error)
	grpc.ServerStream
}

type pvdPutMultiDataServer struct {
	grpc.ServerStream
}

func (x *pvdPutMultiDataServer) Send(m *MultiData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pvdPutMultiDataServer) Recv() (*MultiData, error) {
	m := new(MultiData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pvd_GetHistoryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinglePvd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvdServer).GetHistoryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvdapi.Pvd/getHistoryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvdServer).GetHistoryData(ctx, req.(*SinglePvd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvd_GetDataByTxID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).GetDataByTxID(m, &pvdGetDataByTxIDServer{stream})
}

type Pvd_GetDataByTxIDServer interface {
	Send(*TxData) error
	grpc.ServerStream
}

type pvdGetDataByTxIDServer struct {
	grpc.ServerStream
}

func (x *pvdGetDataByTxIDServer) Send(m *TxData) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvd_GetDataByTxList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).GetDataByTxList(m, &pvdGetDataByTxListServer{stream})
}

type Pvd_GetDataByTxListServer interface {
	Send(*TxListData) error
	grpc.ServerStream
}

type pvdGetDataByTxListServer struct {
	grpc.ServerStream
}

func (x *pvdGetDataByTxListServer) Send(m *TxListData) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvd_GetDataByKeyTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvdServer).GetDataByKeyTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvdapi.Pvd/getDataByKeyTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvdServer).GetDataByKeyTxID(ctx, req.(*TxList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvd_GetDataByField_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FieldInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).GetDataByField(m, &pvdGetDataByFieldServer{stream})
}

type Pvd_GetDataByFieldServer interface {
	Send(*BcData) error
	grpc.ServerStream
}

type pvdGetDataByFieldServer struct {
	grpc.ServerStream
}

func (x *pvdGetDataByFieldServer) Send(m *BcData) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvd_GetAllDataByField_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FieldInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).GetAllDataByField(m, &pvdGetAllDataByFieldServer{stream})
}

type Pvd_GetAllDataByFieldServer interface {
	Send(*MultiData) error
	grpc.ServerStream
}

type pvdGetAllDataByFieldServer struct {
	grpc.ServerStream
}

func (x *pvdGetAllDataByFieldServer) Send(m *MultiData) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvd_GetAllDataByTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimeInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).GetAllDataByTime(m, &pvdGetAllDataByTimeServer{stream})
}

type Pvd_GetAllDataByTimeServer interface {
	Send(*MultiData) error
	grpc.ServerStream
}

type pvdGetAllDataByTimeServer struct {
	grpc.ServerStream
}

func (x *pvdGetAllDataByTimeServer) Send(m *MultiData) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvd_GetAllData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChainInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).GetAllData(m, &pvdGetAllDataServer{stream})
}

type Pvd_GetAllDataServer interface {
	Send(*MultiData) error
	grpc.ServerStream
}

type pvdGetAllDataServer struct {
	grpc.ServerStream
}

func (x *pvdGetAllDataServer) Send(m *MultiData) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvd_GetChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvdServer).GetChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvdapi.Pvd/getChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvdServer).GetChainInfo(ctx, req.(*ChainInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvd_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvdServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvdapi.Pvd/getBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvdServer).GetBlock(ctx, req.(*ChainInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvd_GetAllBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChainInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).GetAllBlock(m, &pvdGetAllBlockServer{stream})
}

type Pvd_GetAllBlockServer interface {
	Send(*MultiData) error
	grpc.ServerStream
}

type pvdGetAllBlockServer struct {
	grpc.ServerStream
}

func (x *pvdGetAllBlockServer) Send(m *MultiData) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvd_GetRangeBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChainInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).GetRangeBlock(m, &pvdGetRangeBlockServer{stream})
}

type Pvd_GetRangeBlockServer interface {
	Send(*MultiData) error
	grpc.ServerStream
}

type pvdGetRangeBlockServer struct {
	grpc.ServerStream
}

func (x *pvdGetRangeBlockServer) Send(m *MultiData) error {
	return x.ServerStream.SendMsg(m)
}

func _Pvd_GetWorldState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvdServer).GetWorldState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvdapi.Pvd/getWorldState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvdServer).GetWorldState(ctx, req.(*ChainInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvd_GetKeyLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvdServer).GetKeyLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvdapi.Pvd/getKeyLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvdServer).GetKeyLists(ctx, req.(*ChainInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvd_GetRichQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvdServer).GetRichQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvdapi.Pvd/getRichQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvdServer).GetRichQuery(ctx, req.(*QueryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pvd_GetRichQueryHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PvdServer).GetRichQueryHistory(m, &pvdGetRichQueryHistoryServer{stream})
}

type Pvd_GetRichQueryHistoryServer interface {
	Send(*MultiPvd) error
	grpc.ServerStream
}

type pvdGetRichQueryHistoryServer struct {
	grpc.ServerStream
}

func (x *pvdGetRichQueryHistoryServer) Send(m *MultiPvd) error {
	return x.ServerStream.SendMsg(m)
}

// Pvd_ServiceDesc is the grpc.ServiceDesc for Pvd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pvd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pvdapi.Pvd",
	HandlerType: (*PvdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getData",
			Handler:    _Pvd_GetData_Handler,
		},
		{
			MethodName: "putData",
			Handler:    _Pvd_PutData_Handler,
		},
		{
			MethodName: "getHistoryData",
			Handler:    _Pvd_GetHistoryData_Handler,
		},
		{
			MethodName: "getDataByKeyTxID",
			Handler:    _Pvd_GetDataByKeyTxID_Handler,
		},
		{
			MethodName: "getChainInfo",
			Handler:    _Pvd_GetChainInfo_Handler,
		},
		{
			MethodName: "getBlock",
			Handler:    _Pvd_GetBlock_Handler,
		},
		{
			MethodName: "getWorldState",
			Handler:    _Pvd_GetWorldState_Handler,
		},
		{
			MethodName: "getKeyLists",
			Handler:    _Pvd_GetKeyLists_Handler,
		},
		{
			MethodName: "getRichQuery",
			Handler:    _Pvd_GetRichQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "putBulkData",
			Handler:       _Pvd_PutBulkData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "putMultiData",
			Handler:       _Pvd_PutMultiData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getDataByTxID",
			Handler:       _Pvd_GetDataByTxID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDataByTxList",
			Handler:       _Pvd_GetDataByTxList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDataByField",
			Handler:       _Pvd_GetDataByField_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getAllDataByField",
			Handler:       _Pvd_GetAllDataByField_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getAllDataByTime",
			Handler:       _Pvd_GetAllDataByTime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getAllData",
			Handler:       _Pvd_GetAllData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getAllBlock",
			Handler:       _Pvd_GetAllBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getRangeBlock",
			Handler:       _Pvd_GetRangeBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getRichQueryHistory",
			Handler:       _Pvd_GetRichQueryHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pvd_hist.proto",
}
