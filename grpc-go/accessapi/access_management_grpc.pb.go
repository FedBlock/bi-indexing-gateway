// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: access_management.proto

package accessapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessManagementService_SaveAccessRequest_FullMethodName             = "/accessapi.AccessManagementService/SaveAccessRequest"
	AccessManagementService_UpdateAccessRequestStatus_FullMethodName     = "/accessapi.AccessManagementService/UpdateAccessRequestStatus"
	AccessManagementService_GetAccessRequest_FullMethodName              = "/accessapi.AccessManagementService/GetAccessRequest"
	AccessManagementService_GetAccessRequestByTxId_FullMethodName        = "/accessapi.AccessManagementService/GetAccessRequestByTxId"
	AccessManagementService_GetAccessRequestsByOwner_FullMethodName      = "/accessapi.AccessManagementService/GetAccessRequestsByOwner"
	AccessManagementService_SearchAccessRequestsByPurpose_FullMethodName = "/accessapi.AccessManagementService/SearchAccessRequestsByPurpose"
)

// AccessManagementServiceClient is the client API for AccessManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AccessManagement 서비스 정의
type AccessManagementServiceClient interface {
	// 접근 요청 저장
	SaveAccessRequest(ctx context.Context, in *AccessRequestData, opts ...grpc.CallOption) (*AccessResponse, error)
	// 접근 요청 상태 변경
	UpdateAccessRequestStatus(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (*AccessResponse, error)
	// 접근 요청 조회
	GetAccessRequest(ctx context.Context, in *RequestQuery, opts ...grpc.CallOption) (*AccessRequestResponse, error)
	// TxId로 접근 요청 조회 (PVD 방식과 동일)
	GetAccessRequestByTxId(ctx context.Context, in *TxIdQuery, opts ...grpc.CallOption) (*AccessRequestResponse, error)
	// 소유자별 요청 목록 조회
	GetAccessRequestsByOwner(ctx context.Context, in *OwnerQuery, opts ...grpc.CallOption) (*RequestListResponse, error)
	// Purpose로 요청 검색
	SearchAccessRequestsByPurpose(ctx context.Context, in *SearchByPurposeRequest, opts ...grpc.CallOption) (*SearchByPurposeResponse, error)
}

type accessManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessManagementServiceClient(cc grpc.ClientConnInterface) AccessManagementServiceClient {
	return &accessManagementServiceClient{cc}
}

func (c *accessManagementServiceClient) SaveAccessRequest(ctx context.Context, in *AccessRequestData, opts ...grpc.CallOption) (*AccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, AccessManagementService_SaveAccessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManagementServiceClient) UpdateAccessRequestStatus(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, AccessManagementService_UpdateAccessRequestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManagementServiceClient) GetAccessRequest(ctx context.Context, in *RequestQuery, opts ...grpc.CallOption) (*AccessRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessRequestResponse)
	err := c.cc.Invoke(ctx, AccessManagementService_GetAccessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManagementServiceClient) GetAccessRequestByTxId(ctx context.Context, in *TxIdQuery, opts ...grpc.CallOption) (*AccessRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessRequestResponse)
	err := c.cc.Invoke(ctx, AccessManagementService_GetAccessRequestByTxId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManagementServiceClient) GetAccessRequestsByOwner(ctx context.Context, in *OwnerQuery, opts ...grpc.CallOption) (*RequestListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestListResponse)
	err := c.cc.Invoke(ctx, AccessManagementService_GetAccessRequestsByOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManagementServiceClient) SearchAccessRequestsByPurpose(ctx context.Context, in *SearchByPurposeRequest, opts ...grpc.CallOption) (*SearchByPurposeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchByPurposeResponse)
	err := c.cc.Invoke(ctx, AccessManagementService_SearchAccessRequestsByPurpose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessManagementServiceServer is the server API for AccessManagementService service.
// All implementations must embed UnimplementedAccessManagementServiceServer
// for forward compatibility.
//
// AccessManagement 서비스 정의
type AccessManagementServiceServer interface {
	// 접근 요청 저장
	SaveAccessRequest(context.Context, *AccessRequestData) (*AccessResponse, error)
	// 접근 요청 상태 변경
	UpdateAccessRequestStatus(context.Context, *StatusUpdateRequest) (*AccessResponse, error)
	// 접근 요청 조회
	GetAccessRequest(context.Context, *RequestQuery) (*AccessRequestResponse, error)
	// TxId로 접근 요청 조회 (PVD 방식과 동일)
	GetAccessRequestByTxId(context.Context, *TxIdQuery) (*AccessRequestResponse, error)
	// 소유자별 요청 목록 조회
	GetAccessRequestsByOwner(context.Context, *OwnerQuery) (*RequestListResponse, error)
	// Purpose로 요청 검색
	SearchAccessRequestsByPurpose(context.Context, *SearchByPurposeRequest) (*SearchByPurposeResponse, error)
	mustEmbedUnimplementedAccessManagementServiceServer()
}

// UnimplementedAccessManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessManagementServiceServer struct{}

func (UnimplementedAccessManagementServiceServer) SaveAccessRequest(context.Context, *AccessRequestData) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAccessRequest not implemented")
}
func (UnimplementedAccessManagementServiceServer) UpdateAccessRequestStatus(context.Context, *StatusUpdateRequest) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessRequestStatus not implemented")
}
func (UnimplementedAccessManagementServiceServer) GetAccessRequest(context.Context, *RequestQuery) (*AccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessRequest not implemented")
}
func (UnimplementedAccessManagementServiceServer) GetAccessRequestByTxId(context.Context, *TxIdQuery) (*AccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessRequestByTxId not implemented")
}
func (UnimplementedAccessManagementServiceServer) GetAccessRequestsByOwner(context.Context, *OwnerQuery) (*RequestListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessRequestsByOwner not implemented")
}
func (UnimplementedAccessManagementServiceServer) SearchAccessRequestsByPurpose(context.Context, *SearchByPurposeRequest) (*SearchByPurposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccessRequestsByPurpose not implemented")
}
func (UnimplementedAccessManagementServiceServer) mustEmbedUnimplementedAccessManagementServiceServer() {
}
func (UnimplementedAccessManagementServiceServer) testEmbeddedByValue() {}

// UnsafeAccessManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessManagementServiceServer will
// result in compilation errors.
type UnsafeAccessManagementServiceServer interface {
	mustEmbedUnimplementedAccessManagementServiceServer()
}

func RegisterAccessManagementServiceServer(s grpc.ServiceRegistrar, srv AccessManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccessManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessManagementService_ServiceDesc, srv)
}

func _AccessManagementService_SaveAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManagementServiceServer).SaveAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManagementService_SaveAccessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManagementServiceServer).SaveAccessRequest(ctx, req.(*AccessRequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManagementService_UpdateAccessRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManagementServiceServer).UpdateAccessRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManagementService_UpdateAccessRequestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManagementServiceServer).UpdateAccessRequestStatus(ctx, req.(*StatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManagementService_GetAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManagementServiceServer).GetAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManagementService_GetAccessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManagementServiceServer).GetAccessRequest(ctx, req.(*RequestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManagementService_GetAccessRequestByTxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxIdQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManagementServiceServer).GetAccessRequestByTxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManagementService_GetAccessRequestByTxId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManagementServiceServer).GetAccessRequestByTxId(ctx, req.(*TxIdQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManagementService_GetAccessRequestsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManagementServiceServer).GetAccessRequestsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManagementService_GetAccessRequestsByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManagementServiceServer).GetAccessRequestsByOwner(ctx, req.(*OwnerQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManagementService_SearchAccessRequestsByPurpose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByPurposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManagementServiceServer).SearchAccessRequestsByPurpose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManagementService_SearchAccessRequestsByPurpose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManagementServiceServer).SearchAccessRequestsByPurpose(ctx, req.(*SearchByPurposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessManagementService_ServiceDesc is the grpc.ServiceDesc for AccessManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accessapi.AccessManagementService",
	HandlerType: (*AccessManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveAccessRequest",
			Handler:    _AccessManagementService_SaveAccessRequest_Handler,
		},
		{
			MethodName: "UpdateAccessRequestStatus",
			Handler:    _AccessManagementService_UpdateAccessRequestStatus_Handler,
		},
		{
			MethodName: "GetAccessRequest",
			Handler:    _AccessManagementService_GetAccessRequest_Handler,
		},
		{
			MethodName: "GetAccessRequestByTxId",
			Handler:    _AccessManagementService_GetAccessRequestByTxId_Handler,
		},
		{
			MethodName: "GetAccessRequestsByOwner",
			Handler:    _AccessManagementService_GetAccessRequestsByOwner_Handler,
		},
		{
			MethodName: "SearchAccessRequestsByPurpose",
			Handler:    _AccessManagementService_SearchAccessRequestsByPurpose_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "access_management.proto",
}
